MusicESrcMP3CD = 'kMCD',
MusicESrcAudioCD = 'kACD',
MusicESrcLibrary = 'kLib',
enum MusicESrc {
typedef enum MusicEShM MusicEShM;
};
MusicEShMGroupings = 'kShG'
MusicEShMAlbums = 'kShA',
MusicEShMSongs = 'kShS',
enum MusicEShM {
typedef enum MusicERpt MusicERpt;
};
MusicERptAll = 'kAll'
MusicERptOne = 'kRp1',
MusicERptOff = 'kRpO',
enum MusicERpt {
typedef enum MusicEPlS MusicEPlS;
};
MusicEPlSRewinding = 'kPSR'
MusicEPlSFastForwarding = 'kPSF',
MusicEPlSPaused = 'kPSp',
MusicEPlSPlaying = 'kPSP',
MusicEPlSStopped = 'kPSS',
enum MusicEPlS {
typedef enum MusicEnum MusicEnum;
};
MusicEnumDetailed = 'lwdt' /* print a detailed report of PostScript errors */
MusicEnumStandard = 'lwst' /* Standard PostScript error handling */,
enum MusicEnum {
typedef enum MusicEKnd MusicEKnd;
};
MusicEKndCdInsert = 'kCDi' /* a printout of the playlist for jewel case inserts */
MusicEKndAlbumListing = 'kAlb' /* a listing of a playlist grouped by album */,
MusicEKndTrackListing = 'kTrk' /* a basic listing of tracks within a playlist */,
enum MusicEKnd {
MusicMiniplayerWindow, MusicPlaylistWindow, MusicVideoWindow;
MusicFolderPlaylist, MusicVisual, MusicWindow, MusicBrowserWindow, MusicEQWindow,
MusicAudioCDTrack, MusicFileTrack, MusicSharedTrack, MusicURLTrack, MusicUserPlaylist,
MusicRadioTunerPlaylist, MusicSource, MusicSubscriptionPlaylist, MusicTrack,
MusicEQPreset, MusicPlaylist, MusicAudioCDPlaylist, MusicLibraryPlaylist,
@class MusicApplication, MusicItem, MusicAirPlayDevice, MusicArtwork, MusicEncoder,
#import <ScriptingBridge/ScriptingBridge.h>
#import <AppKit/AppKit.h>
*/
* Music.h
/*

enum MusicEClS {
typedef enum MusicEAPD MusicEAPD;
};
MusicEAPDUnknown = 'kAPU'
MusicEAPDTV = 'kAPV',
MusicEAPDHomePod = 'kAPH',
MusicEAPDBluetoothDevice = 'kAPB',
MusicEAPDAirPlayDevice = 'kAPO',
MusicEAPDAppleTV = 'kAPT',
MusicEAPDAirPortExpress = 'kAPX',
MusicEAPDComputer = 'kAPC',
enum MusicEAPD {
typedef enum MusicERtK MusicERtK;
};
MusicERtKComputed = 'kRtC' /* computed rating */
MusicERtKUser = 'kRtU' /* user-specified rating */,
enum MusicERtK {
typedef enum MusicEMdK MusicEMdK;
};
MusicEMdKUnknown = 'kUnk'
MusicEMdKTVShow = 'kVdT' /* TV show track */,
MusicEMdKMovie = 'kVdM' /* movie track */,
MusicEMdKMusicVideo = 'kVdV' /* music video track */,
MusicEMdKSong = 'kMdS' /* music track */,
enum MusicEMdK {
typedef enum MusicESpK MusicESpK;
};
MusicESpKPurchasedMusic = 'kSpM'
MusicESpKMusic = 'kSpZ',
MusicESpKLibrary = 'kSpL',
MusicESpKGenius = 'kSpG',
MusicESpKFolder = 'kSpF',
MusicESpKNone = 'kNon',
enum MusicESpK {
typedef enum MusicESrA MusicESrA;
};
MusicESrANames = 'kSrS' /* track names only */
MusicESrADisplayed = 'kSrV' /* visible text fields */,
MusicESrAComposers = 'kSrC' /* composers only */,
MusicESrAArtists = 'kSrR' /* artists only */,
MusicESrAAll = 'kAll' /* all text fields */,
MusicESrAAlbums = 'kSrL' /* albums only */,
enum MusicESrA {
typedef enum MusicESrc MusicESrc;
};
MusicESrcUnknown = 'kUnk'
MusicESrcITunesStore = 'kITS',
MusicESrcSharedLibrary = 'kShd',
MusicESrcRadioTuner = 'kTun',

- (SBElementArray<MusicPlaylist *> *) playlists;
- (SBElementArray<MusicMiniplayerWindow *> *) miniplayerWindows;
- (SBElementArray<MusicEQWindow *> *) EQWindows;
- (SBElementArray<MusicEQPreset *> *) EQPresets;
- (SBElementArray<MusicEncoder *> *) encoders;
- (SBElementArray<MusicBrowserWindow *> *) browserWindows;
- (SBElementArray<MusicAirPlayDevice *> *) AirPlayDevices;
@interface MusicApplication : SBApplication
// The application program
*/
/*
* Music Suite
@end
- (void) select; // select the specified object(s)
- (void) playOnce:(BOOL)once; // play the current track or the specified track or file.
- (void) save; // Save the specified object(s)
- (void) open; // Open the specified object(s)
- (BOOL) exists; // Verify if an object exists
- (SBObject *) duplicateTo:(SBObject *)to; // Duplicate one or more object(s)
- (void) delete; // Delete an element from an object
- (void) close; // Close an object
kind:(MusicEKnd)kind theme:(NSString *)theme; // Print the specified object(s)
- (void) printPrintDialog:(BOOL)printDialog withProperties:(NSDictionary *)withProperties
@protocol MusicGenericMethods
typedef enum MusicEExF MusicEExF;
};
MusicEExFM3U8 = 'kM38'
MusicEExFM3U = 'kM3U',
MusicEExFXML = 'kXML',
MusicEExFUnicodeText = 'kUCT',
MusicEExFPlainText = 'kTXT',
enum MusicEExF {
typedef enum MusicEClS MusicEClS;
};
MusicEClSNotUploaded = 'kUpP'
MusicEClSNoLongerAvailable = 'kRev',
MusicEClSPrerelease = 'kPrR',
MusicEClSSubscription = 'kSub',
MusicEClSDuplicate = 'kDup',
MusicEClSError = 'kErr',
MusicEClSRemoved = 'kRem',
MusicEClSIneligible = 'kRej',
MusicEClSUploaded = 'kUpl',
MusicEClSMatched = 'kMat',
MusicEClSPurchased = 'kPur',
MusicEClSUnknown = 'kUnk',

- (void) pause; // pause playback
- (void) nextTrack; // advance to the next track in the current playlist
- (void) fastForward; // skip forward in a playing track
tracks
- (MusicTrack *) convert:(NSArray<SBObject *> *)x; // convert one or more files or
if already at start of current track
- (void) backTrack; // reposition to beginning of current track or go to previous track
to a playlist
- (MusicTrack *) add:(NSArray<NSURL *> *)x to:(SBObject *)to; // add one or more files
- (void) quit; // Quit the application
- (void) run; // Run the application
kind:(MusicEKnd)kind theme:(NSString *)theme; // Print the specified object(s)
- (void) printPrintDialog:(BOOL)printDialog withProperties:(NSDictionary *)withProperties
@property BOOL visualsEnabled; // are visuals currently being displayed?
@property (copy, readonly) NSString *version; // the version of the application
@property NSInteger soundVolume; // the sound output volume (0 = minimum, 100 = maximum)
@property MusicERpt songRepeat; // the playback repeat mode
@property MusicEShM shuffleMode; // the playback shuffle mode
@property BOOL shuffleEnabled; // are songs played in random order?
@property (copy, readonly) SBObject *selection; // the selection visible to the user
playing?
@property (readonly) MusicEPlS playerState; // is the player stopped, paused, or
track in seconds.
@property double playerPosition; // the playerâ€™s position within the currently playing
@property BOOL mute; // has the sound output been muted?
@property (copy, readonly) NSString *name; // the name of the application
@property BOOL fullScreen; // is the application using the entire screen?
@property BOOL frontmost; // is this the active application?
independent of the play order of the owning playlist.
@property BOOL fixedIndexing; // true if all AppleScript track indices should be
@property BOOL EQEnabled; // is the equalizer enabled?
@property (copy) MusicVisual *currentVisual; // the currently selected visual plug-in
@property (copy, readonly) MusicTrack *currentTrack; // the current targeted track
or streaming web site (provided by streaming server)
@property (copy, readonly) NSString *currentStreamURL; // the URL of the playing stream
track in the playing stream (provided by streaming server)
@property (copy, readonly) NSString *currentStreamTitle; // the name of the current
the currently targeted track
@property (copy, readonly) MusicPlaylist *currentPlaylist; // the playlist containing
preset
@property (copy) MusicEQPreset *currentEQPreset; // the currently selected equalizer
AIFF, WAV, etc.)
@property (copy) MusicEncoder *currentEncoder; // the currently selected encoder (MP3,
selected AirPlay device(s)
@property (copy) NSArray<MusicAirPlayDevice *> *currentAirPlayDevices; // the currently
@property (readonly) BOOL converting; // is a track currently being converted?
@property (readonly) BOOL AirPlayEnabled; // is AirPlay currently enabled?
- (SBElementArray<MusicWindow *> *) windows;
- (SBElementArray<MusicVisual *> *) visuals;
- (SBElementArray<MusicVideoWindow *> *) videoWindows;
- (SBElementArray<MusicTrack *> *) tracks;
- (SBElementArray<MusicSource *> *) sources;
- (SBElementArray<MusicPlaylistWindow *> *) playlistWindows;

@property NSInteger kind; // kind or purpose of this piece of artwork
artwork
@property (copy, readonly) NSNumber *format; // the data format for this piece of
@property (readonly) BOOL downloaded; // was this artwork downloaded by Music?
@property (copy) NSString *objectDescription; // description of artwork as a string
@property (copy) NSImage *data; // data for this artwork, in the form of a picture
@interface MusicArtwork : MusicItem
// a piece of art within a track or playlist
@end
maximum)
@property NSInteger soundVolume; // the output volume for the device (0 = minimum, 100 =
@property (readonly) BOOL supportsVideo; // does the device support video playback?
@property (readonly) BOOL supportsAudio; // does the device support audio playback?
@property BOOL selected; // is the device currently selected?
- (BOOL) protected; // is the device password- or passcode-protected?
device
@property (copy, readonly) NSString *networkAddress; // the network (MAC) address of the
@property (readonly) MusicEAPD kind; // the kind of the device
@property (readonly) BOOL available; // is the device currently available?
@property (readonly) BOOL active; // is the device currently being played to?
@interface MusicAirPlayDevice : MusicItem
// an AirPlay device
@end
- (void) reveal; // reveal and select a track or playlist
- (NSString *) exportAs:(MusicEExF)as to:(NSURL *)to; // export a source or playlist
- (void) download; // download a cloud track or playlist
@property (copy) NSDictionary *properties; // every property of the item
hexadecimal string. This id does not change over time.
@property (copy, readonly) NSString *persistentID; // the id of the item as a
@property (copy) NSString *name; // the name of the item
order
@property (readonly) NSInteger index; // the index of the item in internal application
- (NSInteger) id; // the id of the item
@property (copy, readonly) SBObject *container; // the container of the item
@interface MusicItem : SBObject <MusicGenericMethods>
// an item
@end
- (void) openLocation:(NSString *)x; // Opens an iTunes Store or audio stream URL
- (void) stop; // stop playback
- (void) rewind; // skip backwards in a playing track
- (void) resume; // disable fast forward/rewind and resume playback, if playing.
- (void) previousTrack; // return to the previous track in the current playlist
- (void) playpause; // toggle the playing/paused state of the current track
- (void) playOnce:(BOOL)once; // play the current track or the specified track or file.

for tracks matching the search string. Identical to entering search text in the Search
- (MusicTrack *) searchFor:(NSString *)for_ only:(MusicESrA)only; // search a playlist
- (void) moveTo:(SBObject *)to; // Move playlist(s) to a new location
@property (readonly) BOOL visible; // is this playlist visible in the Source list?
@property (copy, readonly) NSString *time; // the length of all tracks in MM:SS format
@property (readonly) MusicESpK specialKind; // special playlist kind
@property (readonly) NSInteger size; // the total size of all tracks (in bytes)
(if any)
@property (copy, readonly) MusicPlaylist *parent; // folder which contains this playlist
@property BOOL favorited; // is this playlist favorited?
@property (copy) NSString *name; // the name of the playlist
@property (readonly) NSInteger duration; // the total length of all tracks (in seconds)
@property BOOL disliked; // is this playlist disliked?
@property (copy) NSString *objectDescription; // the description of the playlist
- (SBElementArray<MusicArtwork *> *) artworks;
- (SBElementArray<MusicTrack *> *) tracks;
@interface MusicPlaylist : MusicItem
// a list of tracks/streams
@end
the preset is renamed or deleted?
@property BOOL updateTracks; // should tracks which refer to this preset be updated when
@property double preamp; // the equalizer preamp level (-12.0 dB to +12.0 dB)
@property (readonly) BOOL modifiable; // can this preset be modified?
@property double band10; // the equalizer 16 kHz band level (-12.0 dB to +12.0 dB)
@property double band9; // the equalizer 8 kHz band level (-12.0 dB to +12.0 dB)
@property double band8; // the equalizer 4 kHz band level (-12.0 dB to +12.0 dB)
@property double band7; // the equalizer 2 kHz band level (-12.0 dB to +12.0 dB)
@property double band6; // the equalizer 1 kHz band level (-12.0 dB to +12.0 dB)
@property double band5; // the equalizer 500 Hz band level (-12.0 dB to +12.0 dB)
@property double band4; // the equalizer 250 Hz band level (-12.0 dB to +12.0 dB)
@property double band3; // the equalizer 125 Hz band level (-12.0 dB to +12.0 dB)
@property double band2; // the equalizer 64 Hz band level (-12.0 dB to +12.0 dB)
@property double band1; // the equalizer 32 Hz band level (-12.0 dB to +12.0 dB)
@interface MusicEQPreset : MusicItem
// equalizer preset configuration
@end
@property (copy, readonly) NSString *format; // the data format created by the encoder
@interface MusicEncoder : MusicItem
// converts a track to a specific file format
@end
@property (copy) id rawData; // data for this artwork, in original format

@property (readonly) MusicESrc kind;
fixed size
fixed size
@property (readonly) long long freeSpace; // the free space on the source if it has a
@property (readonly) long long capacity; // the total size of the source if it has a
- (SBElementArray<MusicUserPlaylist *> *) userPlaylists;
- (SBElementArray<MusicSubscriptionPlaylist *> *) subscriptionPlaylists;
- (SBElementArray<MusicRadioTunerPlaylist *> *) radioTunerPlaylists;
- (SBElementArray<MusicPlaylist *> *) playlists;
- (SBElementArray<MusicLibraryPlaylist *> *) libraryPlaylists;
- (SBElementArray<MusicAudioCDPlaylist *> *) audioCDPlaylists;
@interface MusicSource : MusicItem
// a media source (library, CD, device, etc.)
@end
- (SBElementArray<MusicURLTrack *> *) URLTracks;
@interface MusicRadioTunerPlaylist : MusicPlaylist
// the radio tuner playlist
@end
- (SBElementArray<MusicSharedTrack *> *) sharedTracks;
- (SBElementArray<MusicURLTrack *> *) URLTracks;
- (SBElementArray<MusicFileTrack *> *) fileTracks;
@interface MusicLibraryPlaylist : MusicPlaylist
// the main library playlist
@end
@property NSInteger year; // the year the album was recorded/released
@property (copy) NSString *genre; // the genre of the CD
@property NSInteger discNumber; // the index of this CD disc in the source album
@property NSInteger discCount; // the total number of discs in this CDâ€™s album
@property (copy) NSString *composer; // the composer of the CD
@property BOOL compilation; // is this CD a compilation album?
@property (copy) NSString *artist; // the artist of the CD
- (SBElementArray<MusicAudioCDTrack *> *) audioCDTracks;
@interface MusicAudioCDPlaylist : MusicPlaylist
// a playlist representing an audio CD
@end
field.

@property (copy) NSString *genre; // the music/audio genre (category) of the track
@property BOOL gapless; // is this track from a gapless album?
@property double finish; // the stop time of the track in seconds
@property (copy) NSString *EQ; // the name of the EQ preset of the track
@property NSInteger episodeNumber; // the episode number of the track
@property (copy) NSString *episodeID; // the episode ID of the track
@property BOOL enabled; // is this track checked for playback?
@property (readonly) double duration; // the length of the track in seconds
downloaded this track
@property (copy, readonly) NSString *downloaderName; // the name of the person who
downloaded this track
@property (copy, readonly) NSString *downloaderAccount; // the account of the person who
@property BOOL disliked; // is this track disliked?
source album
@property NSInteger discNumber; // the index of the disc containing this track on the
@property NSInteger discCount; // the total number of discs in the source album
@property (copy) NSString *objectDescription; // the description of the track
playlist
@property (copy, readonly) NSDate *dateAdded; // the date the track was added to the
data.
two tracks in different playlists have the same database ID, they are sharing the same
@property (readonly) NSInteger databaseID; // the common, unique ID for this track. If
@property (copy) NSString *composer; // the composer of the track
@property BOOL compilation; // is this track from a compilation album?
@property (copy) NSString *comment; // freeform notes about the track
@property (readonly) MusicEClS cloudStatus; // the iCloud status of the track
@property (copy) NSString *category; // the category of the track
@property NSInteger bpm; // the tempo of this track in beats per minute
@property BOOL bookmarkable; // is the playback position for this track remembered?
@property double bookmark; // the bookmark time of the track in seconds
@property (readonly) NSInteger bitRate; // the bit rate of the track (in kbps)
@property (copy) NSString *artist; // the artist/source of the track
for this track
@property (readonly) MusicERtK albumRatingKind; // the rating kind of the album rating
@property NSInteger albumRating; // the rating of the album for this track (0 to 100)
@property BOOL albumFavorited; // is the album for this track favorited?
@property BOOL albumDisliked; // is the album for this track disliked?
@property (copy) NSString *albumArtist; // the album artist of the track
@property (copy) NSString *album; // the album name of the track
- (SBElementArray<MusicArtwork *> *) artworks;
@interface MusicTrack : MusicItem
// playable audio source
@end
- (SBElementArray<MusicURLTrack *> *) URLTracks;
- (SBElementArray<MusicFileTrack *> *) fileTracks;
@interface MusicSubscriptionPlaylist : MusicPlaylist
// a subscription playlist from Apple Music
@end

@interface MusicAudioCDTrack : MusicTrack
// a track on an audio CD
@end
@property NSInteger year; // the year the track was recorded/released
@property (copy) NSString *work; // the work name of the track
to 100%)
@property NSInteger volumeAdjustment; // relative volume adjustment of the track (-100%
@property BOOL unplayed; // is this track unplayed?
@property NSInteger trackNumber; // the index of the track on the source album
@property NSInteger trackCount; // the total number of tracks on the source album
@property (copy, readonly) NSString *time; // the length of the track in MM:SS format
@property double start; // the start time of the track in seconds
@property (readonly) long long size; // the size of the track (in bytes)
sorting by show name
@property (copy) NSString *sortShow; // override string to use for the track when
sorting by composer
@property (copy) NSString *sortComposer; // override string to use for the track when
sorting by name
@property (copy) NSString *sortName; // override string to use for the track when
sorting by album artist
@property (copy) NSString *sortAlbumArtist; // override string to use for the track when
sorting by artist
@property (copy) NSString *sortArtist; // override string to use for the track when
sorting by album
@property (copy) NSString *sortAlbum; // override string to use for the track when
@property (copy) NSString *show; // the show name of the track
@property (copy) NSDate *skippedDate; // the date and time this track was last skipped
@property NSInteger skippedCount; // number of times this track has been skipped
@property BOOL shufflable; // is this track included when shuffling?
@property NSInteger seasonNumber; // the season number of the track
@property (readonly) NSInteger sampleRate; // the sample rate of the track (in Hz)
@property (copy, readonly) NSDate *releaseDate; // the release date of this track
@property (readonly) MusicERtK ratingKind; // the rating kind of this track
@property NSInteger rating; // the rating of this track (0 to 100)
purchased this track
@property (copy, readonly) NSString *purchaserName; // the name of the person who
purchased this track
@property (copy, readonly) NSString *purchaserAccount; // the account of the person who
@property (copy) NSDate *playedDate; // the date and time this track was last played
@property NSInteger playedCount; // number of times this track has been played
@property NSInteger movementNumber; // the index of the movement in the work
@property NSInteger movementCount; // the total number of movements in the work
@property (copy) NSString *movement; // the movement name of the track
content of this track
@property (copy, readonly) NSDate *modificationDate; // the modification date of the
@property MusicEMdK mediaKind; // the media kind of the track
@property (copy) NSString *lyrics; // the lyrics of the track
@property BOOL favorited; // is this track favorited?
@property (copy) NSString *longDescription; // the long description of the track
@property (copy, readonly) NSString *kind; // a text description of the track
used to denote movements within a classical work.
@property (copy) NSString *grouping; // the grouping (piece) of the track. Generally

@interface MusicVisual : MusicItem
// a visual plug-in
@end
@interface MusicFolderPlaylist : MusicUserPlaylist
// a folder that contains other playlists
@end
@property (readonly) BOOL genius; // is this a Genius Playlist?
@property (readonly) BOOL smart; // is this a Smart Playlist?
@property BOOL shared; // is this playlist shared?
- (SBElementArray<MusicSharedTrack *> *) sharedTracks;
- (SBElementArray<MusicURLTrack *> *) URLTracks;
- (SBElementArray<MusicFileTrack *> *) fileTracks;
@interface MusicUserPlaylist : MusicPlaylist
// custom playlists created by the user
@end
@property (copy) NSString *address; // the URL for this track
@interface MusicURLTrack : MusicTrack
// a track representing a network stream
@end
@interface MusicSharedTrack : MusicTrack
// a track residing in a shared library
@end
trackâ€™s file
- (void) refresh; // update file track information from the current information in the
@property (copy) NSURL *location; // the location of the file represented by this track
@interface MusicFileTrack : MusicTrack
// a track representing an audio file (MP3, AIFF, etc.)
@end
this track
@property (copy, readonly) NSURL *location; // the location of the file represented by

@end
@interface MusicVideoWindow : MusicWindow
// the video window
@end
@property (copy, readonly) MusicPlaylist *view; // the playlist displayed in the window
@property (copy, readonly) SBObject *selection; // the selected tracks
@interface MusicPlaylistWindow : MusicWindow
// a sub-window showing a single playlist
@end
@interface MusicMiniplayerWindow : MusicWindow
// the miniplayer window
@end
@interface MusicEQWindow : MusicWindow
// the equalizer window
@end
@property (copy) MusicPlaylist *view; // the playlist currently displayed in the window
@property (copy, readonly) SBObject *selection; // the selected tracks
@interface MusicBrowserWindow : MusicWindow
// the main window
@end
@property BOOL zoomed; // is the window zoomed?
@property (readonly) BOOL zoomable; // is the window zoomable?
@property BOOL visible; // is the window visible?
@property (readonly) BOOL resizable; // is the window resizable?
@property NSPoint position; // the upper left position of the window
@property BOOL fullScreen; // is the window full screen?
@property BOOL collapsed; // is the window collapsed?
@property (readonly) BOOL collapseable; // does the window have a collapse button?
@property (readonly) BOOL closeable; // does the window have a close button?
@property NSRect bounds; // the boundary rectangle for the window
@interface MusicWindow : MusicItem
// any window
@end

