typedef enum TVEMdK TVEMdK;
};
TVEMdKUnknown = 'kUnk'
TVEMdKTVShow = 'kVdT' /* TV show track */,
TVEMdKMovie = 'kVdM' /* movie track */,
TVEMdKHomeVideo = 'kVdH' /* home video track */,
enum TVEMdK {
typedef enum TVESpK TVESpK;
};
TVESpKTVShows = 'kSpT'
TVESpKMovies = 'kSpI',
TVESpKLibrary = 'kSpL',
TVESpKFolder = 'kSpF',
TVESpKNone = 'kNon',
enum TVESpK {
typedef enum TVESrA TVESrA;
};
TVESrANames = 'kSrS' /* track names only */
TVESrADisplayed = 'kSrV' /* visible text fields */,
TVESrAArtists = 'kSrR' /* artists only */,
TVESrAAll = 'kAll' /* all text fields */,
TVESrAAlbums = 'kSrL' /* albums only */,
enum TVESrA {
typedef enum TVESrc TVESrc;
};
TVESrcUnknown = 'kUnk'
TVESrcITunesStore = 'kITS',
TVESrcSharedLibrary = 'kShd',
TVESrcLibrary = 'kLib',
enum TVESrc {
typedef enum TVEPlS TVEPlS;
};
TVEPlSRewinding = 'kPSR'
TVEPlSFastForwarding = 'kPSF',
TVEPlSPaused = 'kPSp',
TVEPlSPlaying = 'kPSP',
TVEPlSStopped = 'kPSS',
enum TVEPlS {
TVWindow, TVBrowserWindow, TVPlaylistWindow, TVVideoWindow;
TVTrack, TVFileTrack, TVSharedTrack, TVURLTrack, TVUserPlaylist, TVFolderPlaylist,
@class TVApplication, TVItem, TVArtwork, TVPlaylist, TVLibraryPlaylist, TVSource,
#import <ScriptingBridge/ScriptingBridge.h>
#import <AppKit/AppKit.h>
*/
* TV.h
/*

@property (copy, readonly) NSString *version; // the version of the application
@property NSInteger soundVolume; // the sound output volume (0 = minimum, 100 = maximum)
@property (copy, readonly) SBObject *selection; // the selection visible to the user
@property (readonly) TVEPlS playerState; // is the player stopped, paused, or playing?
track in seconds.
@property double playerPosition; // the playerâ€™s position within the currently playing
@property BOOL mute; // has the sound output been muted?
@property (copy, readonly) NSString *name; // the name of the application
@property BOOL fullScreen; // is the application using the entire screen?
@property BOOL frontmost; // is this the active application?
independent of the play order of the owning playlist.
@property BOOL fixedIndexing; // true if all AppleScript track indices should be
@property (copy, readonly) TVTrack *currentTrack; // the current targeted track
or streaming web site (provided by streaming server)
@property (copy, readonly) NSString *currentStreamURL; // the URL of the playing stream
track in the playing stream (provided by streaming server)
@property (copy, readonly) NSString *currentStreamTitle; // the name of the current
currently targeted track
@property (copy, readonly) TVPlaylist *currentPlaylist; // the playlist containing the
- (SBElementArray<TVWindow *> *) windows;
- (SBElementArray<TVVideoWindow *> *) videoWindows;
- (SBElementArray<TVTrack *> *) tracks;
- (SBElementArray<TVSource *> *) sources;
- (SBElementArray<TVPlaylistWindow *> *) playlistWindows;
- (SBElementArray<TVPlaylist *> *) playlists;
- (SBElementArray<TVBrowserWindow *> *) browserWindows;
@interface TVApplication : SBApplication
// The application program
*/
/*
* TV Suite
@end
- (void) select; // select the specified object(s)
- (void) playOnce:(BOOL)once; // play the current track or the specified track or file.
- (void) save; // Save the specified object(s)
- (void) open; // Open the specified object(s)
- (BOOL) exists; // Verify if an object exists
- (SBObject *) duplicateTo:(SBObject *)to; // Duplicate one or more object(s)
- (void) delete; // Delete an element from an object
- (void) close; // Close an object
@protocol TVGenericMethods
typedef enum TVERtK TVERtK;
};
TVERtKComputed = 'kRtC' /* computed rating */
TVERtKUser = 'kRtU' /* user-specified rating */,
enum TVERtK {

@interface TVPlaylist : TVItem
// a list of tracks/streams
@end
@property (copy) id rawData; // data for this artwork, in original format
@property NSInteger kind; // kind or purpose of this piece of artwork
artwork
@property (copy, readonly) NSNumber *format; // the data format for this piece of
@property (readonly) BOOL downloaded; // was this artwork downloaded by iTunes?
@property (copy) NSString *objectDescription; // description of artwork as a string
@property (copy) NSImage *data; // data for this artwork, in the form of a picture
@interface TVArtwork : TVItem
// a piece of art within a track or playlist
@end
- (void) reveal; // reveal and select a track or playlist
- (void) download; // download a cloud track or playlist
@property (copy) NSDictionary *properties; // every property of the item
hexadecimal string. This id does not change over time.
@property (copy, readonly) NSString *persistentID; // the id of the item as a
@property (copy) NSString *name; // the name of the item
order
@property (readonly) NSInteger index; // the index of the item in internal application
- (NSInteger) id; // the id of the item
@property (copy, readonly) SBObject *container; // the container of the item
@interface TVItem : SBObject <TVGenericMethods>
// an item
@end
- (void) openLocation:(NSString *)x; // Opens an iTunes Store or stream URL
- (void) stop; // stop playback
- (void) rewind; // skip backwards in a playing track
- (void) resume; // disable fast forward/rewind and resume playback, if playing.
- (void) previousTrack; // return to the previous track in the current playlist
- (void) playpause; // toggle the playing/paused state of the current track
- (void) playOnce:(BOOL)once; // play the current track or the specified track or file.
- (void) pause; // pause playback
- (void) nextTrack; // advance to the next track in the current playlist
- (void) fastForward; // skip forward in a playing track
- (TVTrack *) convert:(NSArray<SBObject *> *)x; // convert one or more files or tracks
if already at start of current track
- (void) backTrack; // reposition to beginning of current track or go to previous track
playlist
- (TVTrack *) add:(NSArray<NSURL *> *)x to:(SBObject *)to; // add one or more files to a
- (void) quit; // Quit the application
- (void) run; // Run the application

@property (readonly) NSInteger bitRate; // the bit rate of the track (in kbps)
this track
@property (readonly) TVERtK albumRatingKind; // the rating kind of the album rating for
@property NSInteger albumRating; // the rating of the album for this track (0 to 100)
@property (copy) NSString *album; // the album name of the track
- (SBElementArray<TVArtwork *> *) artworks;
@interface TVTrack : TVItem
// playable video source
@end
@property (readonly) TVESrc kind;
fixed size
fixed size
@property (readonly) long long freeSpace; // the free space on the source if it has a
@property (readonly) long long capacity; // the total size of the source if it has a
- (SBElementArray<TVUserPlaylist *> *) userPlaylists;
- (SBElementArray<TVPlaylist *> *) playlists;
- (SBElementArray<TVLibraryPlaylist *> *) libraryPlaylists;
@interface TVSource : TVItem
// a media source (library, CD, device, etc.)
@end
- (SBElementArray<TVSharedTrack *> *) sharedTracks;
- (SBElementArray<TVURLTrack *> *) URLTracks;
- (SBElementArray<TVFileTrack *> *) fileTracks;
@interface TVLibraryPlaylist : TVPlaylist
// the main library playlist
@end
tracks matching the search string. Identical to entering search text in the Search field.
- (TVTrack *) searchFor:(NSString *)for_ only:(TVESrA)only; // search a playlist for
- (void) moveTo:(SBObject *)to; // Move playlist(s) to a new location
@property (readonly) BOOL visible; // is this playlist visible in the Source list?
@property (copy, readonly) NSString *time; // the length of all tracks in MM:SS format
@property (readonly) TVESpK specialKind; // special playlist kind
@property (readonly) NSInteger size; // the total size of all tracks (in bytes)
(if any)
@property (copy, readonly) TVPlaylist *parent; // folder which contains this playlist
@property (copy) NSString *name; // the name of the playlist
@property (readonly) NSInteger duration; // the total length of all tracks (in seconds)
@property (copy) NSString *objectDescription; // the description of the playlist
- (SBElementArray<TVArtwork *> *) artworks;
- (SBElementArray<TVTrack *> *) tracks;

@property double start; // the start time of the track in seconds@property (readonly) long long size; // the size of the track (in bytes)
sorting by show name
@property (copy) NSString *sortShow; // override string to use for the track when
sorting by name
@property (copy) NSString *sortName; // override string to use for the track when
sorting by artist
@property (copy) NSString *sortDirector; // override string to use for the track when
sorting by album
@property (copy) NSString *sortAlbum; // override string to use for the track when
@property (copy) NSString *show; // the show name of the track
@property (copy) NSDate *skippedDate; // the date and time this track was last skipped
@property NSInteger skippedCount; // number of times this track has been skipped
@property NSInteger seasonNumber; // the season number of the track
@property (readonly) NSInteger sampleRate; // the sample rate of the track (in Hz)
@property (copy, readonly) NSDate *releaseDate; // the release date of this track
@property (readonly) TVERtK ratingKind; // the rating kind of this track
@property NSInteger rating; // the rating of this track (0 to 100)
purchased this track
@property (copy, readonly) NSString *purchaserName; // the name of the person who
purchased this track
@property (copy, readonly) NSString *purchaserAccount; // the account of the person who
@property (copy) NSDate *playedDate; // the date and time this track was last played
@property NSInteger playedCount; // number of times this track has been played
content of this track
@property (copy, readonly) NSDate *modificationDate; // the modification date of the
@property TVEMdK mediaKind; // the media kind of the track
@property (copy) NSString *longDescription; // the long description of the track
@property (copy, readonly) NSString *kind; // a text description of the track
used to denote movements within a classical work.
@property (copy) NSString *grouping; // the grouping (piece) of the track. Generally
@property (copy) NSString *genre; // the genre (category) of the track
@property double finish; // the stop time of the track in seconds
@property NSInteger episodeNumber; // the episode number of the track
@property (copy) NSString *episodeID; // the episode ID of the track
@property BOOL enabled; // is this track checked for playback?
@property (readonly) double duration; // the length of the track in seconds
downloaded this track
@property (copy, readonly) NSString *downloaderName; // the name of the person who
downloaded this track
@property (copy, readonly) NSString *downloaderAccount; // the account of the person who
source album
@property NSInteger discNumber; // the index of the disc containing this track on the
@property NSInteger discCount; // the total number of discs in the source album
@property (copy) NSString *director; // the artist/source of the track
@property (copy) NSString *objectDescription; // the description of the track
playlist
@property (copy, readonly) NSDate *dateAdded; // the date the track was added to the
data.
two tracks in different playlists have the same database ID, they are sharing the same
@property (readonly) NSInteger databaseID; // the common, unique ID for this track. If
@property (copy) NSString *comment; // freeform notes about the track
@property (copy) NSString *category; // the category of the track
@property BOOL bookmarkable; // is the playback position for this track remembered?
@property double bookmark; // the bookmark time of the track in seconds

// any window
@end
@interface TVFolderPlaylist : TVUserPlaylist
// a folder that contains other playlists
@end
@property (readonly) BOOL smart; // is this a Smart Playlist?
@property BOOL shared; // is this playlist shared?
- (SBElementArray<TVSharedTrack *> *) sharedTracks;
- (SBElementArray<TVURLTrack *> *) URLTracks;
- (SBElementArray<TVFileTrack *> *) fileTracks;
@interface TVUserPlaylist : TVPlaylist
// custom playlists created by the user
@end
@property (copy) NSString *address; // the URL for this track
@interface TVURLTrack : TVTrack
// a track representing a network stream
@end
@interface TVSharedTrack : TVTrack
// a track residing in a shared library
@end
trackâ€™s file
- (void) refresh; // update file track information from the current information in the
@property (copy) NSURL *location; // the location of the file represented by this track
@interface TVFileTrack : TVTrack
// a track representing a video file
@end
@property NSInteger year; // the year the track was recorded/released
to 100%)
@property NSInteger volumeAdjustment; // relative volume adjustment of the track (-100%
@property BOOL unplayed; // is this track unplayed?
@property NSInteger trackNumber; // the index of the track on the source album
@property NSInteger trackCount; // the total number of tracks on the source album
@property (copy, readonly) NSString *time; // the length of the track in MM:SS format

@end
@interface TVVideoWindow : TVWindow
// the video window
@end
@property (copy, readonly) TVPlaylist *view; // the playlist displayed in the window
@property (copy, readonly) SBObject *selection; // the selected tracks
@interface TVPlaylistWindow : TVWindow
// a sub-window showing a single playlist
@end
@property (copy) TVPlaylist *view; // the playlist currently displayed in the window
@property (copy, readonly) SBObject *selection; // the selected tracks
@interface TVBrowserWindow : TVWindow
// the main window
@end
@property BOOL zoomed; // is the window zoomed?
@property (readonly) BOOL zoomable; // is the window zoomable?
@property BOOL visible; // is the window visible?
@property (readonly) BOOL resizable; // is the window resizable?
@property NSPoint position; // the upper left position of the window
@property BOOL fullScreen; // is the window full screen?
@property BOOL collapsed; // is the window collapsed?
@property (readonly) BOOL collapseable; // does the window have a collapse button?
@property (readonly) BOOL closeable; // does the window have a close button?
@property NSRect bounds; // the boundary rectangle for the window
@interface TVWindow : TVItem

