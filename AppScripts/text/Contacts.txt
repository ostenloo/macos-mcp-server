(BOOL)printDialog; // Print a document.
- (void) printWithProperties:(NSDictionary *)withProperties printDialog:
- (void) saveIn:(NSURL *)in_ as:(ContactsSaveableFileFormat)as; // Save a document.
document.
- (void) closeSaving:(ContactsSaveOptions)saving savingIn:(NSURL *)savingIn; // Close a
@protocol ContactsGenericMethods
typedef enum ContactsInstantMessageServiceType ContactsInstantMessageServiceType;
};
ContactsInstantMessageServiceTypeYahoo = 'az93'
ContactsInstantMessageServiceTypeSkype = 'az92',
ContactsInstantMessageServiceTypeQQ = 'az91',
ContactsInstantMessageServiceTypeMSN = 'az90',
ContactsInstantMessageServiceTypeJabber = 'az89',
ContactsInstantMessageServiceTypeICQ = 'az88',
ContactsInstantMessageServiceTypeGoogleTalk = 'az87',
ContactsInstantMessageServiceTypeGaduGadu = 'az86',
ContactsInstantMessageServiceTypeFacebook = 'az94',
ContactsInstantMessageServiceTypeAIM = 'az85',
enum ContactsInstantMessageServiceType {
typedef enum ContactsSaveableFileFormat ContactsSaveableFileFormat;
};
ContactsSaveableFileFormatArchive = 'abbu' /* The native Contacts file format */
enum ContactsSaveableFileFormat {
typedef enum ContactsPrintingErrorHandling ContactsPrintingErrorHandling;
};
PostScript errors */
ContactsPrintingErrorHandlingDetailed = 'lwdt' /* print a detailed report of
*/,
ContactsPrintingErrorHandlingStandard = 'lwst' /* Standard PostScript error handling
enum ContactsPrintingErrorHandling {
typedef enum ContactsSaveOptions ContactsSaveOptions;
};
ContactsSaveOptionsAsk = 'ask ' /* Ask the user whether or not to save the file. */
ContactsSaveOptionsNo = 'no ' /* Do not save the file. */,
ContactsSaveOptionsYes = 'yes ' /* Save the file. */,
enum ContactsSaveOptions {
ContactsSocialProfile, ContactsUrl, ContactsYahooHandle;
ContactsMSNHandle, ContactsPerson, ContactsPhone, ContactsRelatedName,
ContactsGroup, ContactsICQHandle, ContactsInstantMessage, ContactsJabberHandle,
ContactsContactInfo, ContactsAIMHandle, ContactsCustomDate, ContactsEmail, ContactsEntry,
@class ContactsApplication, ContactsDocument, ContactsWindow, ContactsAddress,
#import <ScriptingBridge/ScriptingBridge.h>
#import <AppKit/AppKit.h>
*/
/*
* Contacts.h

@property BOOL visible; // Is the window visible right now?
@property (readonly) BOOL resizable; // Can the window be resized?
@property BOOL miniaturized; // Is the window minimized right now?
@property (readonly) BOOL miniaturizable; // Does the window have a minimize button?
@property (readonly) BOOL closeable; // Does the window have a close button?
@property NSRect bounds; // The bounding rectangle of the window.
@property NSInteger index; // The index of the window, ordered front to back.
- (NSInteger) id; // The unique identifier of the window.
@property (copy, readonly) NSString *name; // The title of the window.
@interface ContactsWindow : SBObject <ContactsGenericMethods>
// A window.
@end
@property (copy, readonly) NSURL *file; // Its location on disk, if it has one.
@property (readonly) BOOL modified; // Has it been modified since the last save?
@property (copy, readonly) NSString *name; // Its name.
@interface ContactsDocument : SBObject <ContactsGenericMethods>
// A document.
@end
application class.
- (id) save; // Save all Contacts changes. Also see the unsaved property for the
- (BOOL) exists:(id)x; // Verify that an object exists.
- (void) quitSaving:(ContactsSaveOptions)saving; // Quit the application.
(BOOL)printDialog; // Print a document.
- (void) print:(id)x withProperties:(NSDictionary *)withProperties printDialog:
- (id) open:(id)x; // Open a document.
@property (copy, readonly) NSString *version; // The version number of the application.
@property (readonly) BOOL frontmost; // Is this the active application?
@property (copy, readonly) NSString *name; // The name of the application.
- (SBElementArray<ContactsWindow *> *) windows;
- (SBElementArray<ContactsDocument *> *) documents;
@interface ContactsApplication : SBApplication
// The application's top-level scripting object.
*/
/*
* Standard Suite
@end
- (void) moveTo:(SBObject *)to; // Move an object to a new location.
Copy an object.
- (void) duplicateTo:(SBObject *)to withProperties:(NSDictionary *)withProperties; //
- (void) delete; // Delete an object.

with the record.
- (NSString *) id; // unique identifier for this entry, this is persistent, and stays
@property (copy) id value; // Value.
"home", etc.
@property (copy) id label; // Label is the label associated with value like "work",
@interface ContactsContactInfo : SBObject <ContactsGenericMethods>
// Container object in the database, holds a key and a value
@end
@property (copy) id state; // State, Province, or Region part of the address.
character iso country code).
@property (copy) id countryCode; // Country code part of the address (should be a two
@property (copy) id label; // Label.
@property (copy) id country; // Country part of the address.
@property (copy) id zip; // Zip or postal code of the address.
- (void) setId: (NSString *) id;
- (NSString *) id; // unique identifier for this address.
carriage returns.
@property (copy) id street; // Street part of the address, multiple lines separated by
address.
@property (copy, readonly) id formattedAddress; // properly formatted string for this
@property (copy) id city; // City part of the address.
@interface ContactsAddress : SBObject <ContactsGenericMethods>
// Address for the given record.
@end
for addresses.
@property (copy, readonly) id defaultCountryCode; // Returns the default country code
@property (copy) NSArray<ContactsPerson *> *selection; // Currently selected entries
@property (readonly) BOOL unsaved; // Does Contacts have any unsaved changes?
@property (copy) ContactsPerson *myCard; // Returns my Contacts card.
- (SBElementArray<ContactsPerson *> *) people;
- (SBElementArray<ContactsGroup *> *) groups;
@interface ContactsApplication (ContactsScriptSuite)
*/
/*
* Contacts Script Suite
@end
are displayed in the window.
@property (copy, readonly) ContactsDocument *document; // The document whose contents
@property BOOL zoomed; // Is the window zoomed right now?
@property (readonly) BOOL zoomable; // Does the window have a zoom button?

@interface ContactsPerson : ContactsEntry
// A person in the address book database.
@end
@property (copy) id userName; // The user name of this instant message address.
@property (copy) id serviceType; // The service type of this instant message address.
address.
@property (copy, readonly) id serviceName; // The service name of this instant message
@interface ContactsInstantMessage : ContactsContactInfo
// Address for instant messaging.
@end
@property (copy) NSString *name; // The name of this group.
- (SBElementArray<ContactsPerson *> *) people;
- (SBElementArray<ContactsGroup *> *) groups;
@interface ContactsGroup : ContactsEntry
// A Group Record in the address book database
@end
- (ContactsPerson *) removeFrom:(SBObject *)from; // Remove a child object.
- (ContactsPerson *) addTo:(SBObject *)to; // Add a child object.
@property BOOL selected; // Is the entry selected?
- (NSString *) id; // unique and persistent identifier for this record.
@property (copy, readonly) NSDate *creationDate; // when the contact was created.
modified.
@property (copy, readonly) NSDate *modificationDate; // when the contact was last
@interface ContactsEntry : SBObject <ContactsGenericMethods>
// An entry in the address book database
@end
@interface ContactsEmail : ContactsContactInfo
// Email address for a person.
@end
@interface ContactsCustomDate : ContactsContactInfo
// Arbitrary date associated with this person.
@end

- (NSString *) id; // The persistent unique identifier for this profile.
@interface ContactsSocialProfile : SBObject <ContactsGenericMethods>
// Profile for social networks.
@end
@interface ContactsRelatedName : ContactsContactInfo
// Other names related to this person.
@end
@interface ContactsPhone : ContactsContactInfo
// Phone number for a person.
@end
@property (copy) id firstName; // The First name of this person.
@property (copy) id lastName; // The Last name of this person.
@property (copy) id jobTitle; // The job title of this person.
person.
@property (copy) id phoneticFirstName; // The phonetic version of the First name of this
@property (copy) id middleName; // The Middle name of this person.
@property BOOL company; // Is the current record a company or a person.
@property (copy) id note; // Notes for this person.
name display order preference setting in Contacts.
@property (copy, readonly) NSString *name; // First/Last name of the person, uses the
@property (copy) id image; // Image for person.
@property (copy) id department; // Department that this person works for.
this person.
@property (copy) id phoneticMiddleName; // The Phonetic version of the Middle name of
@property (copy) id title; // The title of this person.
person.
@property (copy) id phoneticLastName; // The phonetic version of the Last name of this
@property (copy) id birthDate; // The birth date of this person.
@property (copy) id homePage; // The home page of this person.
returns a card in version 3.0 format.
@property (copy, readonly) id vcard; // Person information in vCard format, this always
@property (copy) id suffix; // The Suffix of this person.
@property (copy) id maidenName; // The Maiden name of this person.
@property (copy) id organization; // Organization that employs this person.
@property (copy) id nickname; // The Nickname of this person.
- (SBElementArray<ContactsEmail *> *) emails;
- (SBElementArray<ContactsRelatedName *> *) relatedNames;
- (SBElementArray<ContactsSocialProfile *> *) socialProfiles;
- (SBElementArray<ContactsInstantMessage *> *) instantMessages;
- (SBElementArray<ContactsCustomDate *> *) customDates;
- (SBElementArray<ContactsGroup *> *) groups;
- (SBElementArray<ContactsPhone *> *) phones;
- (SBElementArray<ContactsAddress *> *) addresses;
- (SBElementArray<ContactsUrl *> *) urls;

@end
@interface ContactsUrl : ContactsContactInfo
// URLs for this person.
@end
@property (copy) id url; // The URL of this social profile.
social profile.
@property (copy) id userIdentifier; // A service-specific identifier used with this
@property (copy) id userName; // The username used with this social profile.
@property (copy) id serviceName; // The service name of this social profile.

