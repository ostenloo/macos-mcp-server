- (SBElementArray<RemindersDocument *> *) documents;
@interface RemindersApplication : SBApplication
// The application's top-level scripting object.
*/
/*
* Standard Suite
@end
- (void) moveTo:(SBObject *)to; // Move an object to a new location.
Copy an object.
- (void) duplicateTo:(SBObject *)to withProperties:(NSDictionary *)withProperties; //
- (void) delete; // Delete an object.
(BOOL)printDialog; // Print a document.
- (void) printWithProperties:(NSDictionary *)withProperties printDialog:
- (void) saveIn:(NSURL *)in_ as:(RemindersSaveableFileFormat)as; // Save a document.
document.
- (void) closeSaving:(RemindersSaveOptions)saving savingIn:(NSURL *)savingIn; // Close a
@protocol RemindersGenericMethods
typedef enum RemindersSaveableFileFormat RemindersSaveableFileFormat;
};
RemindersSaveableFileFormatText = 'ctxt' /* Text File Format */
enum RemindersSaveableFileFormat {
typedef enum RemindersPrintingErrorHandling RemindersPrintingErrorHandling;
};
PostScript errors */
RemindersPrintingErrorHandlingDetailed = 'lwdt' /* print a detailed report of
*/,
RemindersPrintingErrorHandlingStandard = 'lwst' /* Standard PostScript error handling
enum RemindersPrintingErrorHandling {
typedef enum RemindersSaveOptions RemindersSaveOptions;
};
RemindersSaveOptionsAsk = 'ask ' /* Ask the user whether or not to save the file. */
RemindersSaveOptionsNo = 'no ' /* Do not save the file. */,
RemindersSaveOptionsYes = 'yes ' /* Save the file. */,
enum RemindersSaveOptions {
RemindersList, RemindersReminder;
@class RemindersApplication, RemindersDocument, RemindersWindow, RemindersAccount,
#import <ScriptingBridge/ScriptingBridge.h>
#import <AppKit/AppKit.h>
*/
/*
* Reminders.h

- (SBElementArray<RemindersList *> *) lists;
- (SBElementArray<RemindersAccount *> *) accounts;
@interface RemindersApplication (RemindersSuite)
// The Reminders application
*/
/*
* Reminders Suite
@end
are displayed in the window.
@property (copy, readonly) RemindersDocument *document; // The document whose contents
@property BOOL zoomed; // Is the window zoomed right now?
@property (readonly) BOOL zoomable; // Does the window have a zoom button?
@property BOOL visible; // Is the window visible right now?
@property (readonly) BOOL resizable; // Can the window be resized?
@property BOOL miniaturized; // Is the window minimized right now?
@property (readonly) BOOL miniaturizable; // Does the window have a minimize button?
@property (readonly) BOOL closeable; // Does the window have a close button?
@property NSRect bounds; // The bounding rectangle of the window.
@property NSInteger index; // The index of the window, ordered front to back.
- (NSInteger) id; // The unique identifier of the window.
@property (copy, readonly) NSString *name; // The title of the window.
@interface RemindersWindow : SBObject <RemindersGenericMethods>
// A window.
@end
@property (copy, readonly) NSURL *file; // Its location on disk, if it has one.
@property (readonly) BOOL modified; // Has it been modified since the last save?
@property (copy, readonly) NSString *name; // Its name.
@interface RemindersDocument : SBObject <RemindersGenericMethods>
// A document.
@end
- (BOOL) exists:(id)x; // Verify that an object exists.
- (void) quitSaving:(RemindersSaveOptions)saving; // Quit the application.
(BOOL)printDialog; // Print a document.
- (void) print:(id)x withProperties:(NSDictionary *)withProperties printDialog:
- (id) open:(id)x; // Open a document.
@property (copy, readonly) NSString *version; // The version number of the application.
@property (readonly) BOOL frontmost; // Is this the active application?
@property (copy, readonly) NSString *name; // The name of the application.
- (SBElementArray<RemindersWindow *> *) windows;

high, 5: medium, 6–9: low
@property NSInteger priority; // The priority of the reminder; 0: no priority, 1–4:
@property (copy) NSDate *remindMeDate; // The remind date of the reminder
only set a date
@property (copy) NSDate *alldayDueDate; // The all-day due date of the reminder; will
and time
@property (copy) NSDate *dueDate; // The due date of the reminder; will set both date
@property (copy) NSDate *completionDate; // The completion date of the reminder
@property BOOL completed; // Whether the reminder is completed
@property (copy) NSString *body; // The notes attached to the reminder
reminder
@property (copy, readonly) NSDate *modificationDate; // The modification date of the
@property (copy, readonly) NSDate *creationDate; // The creation date of the reminder
@property (copy, readonly) id container; // The container of the reminder
- (NSString *) id; // The unique identifier of the reminder
@property (copy) NSString *name; // The name of the reminder
@interface RemindersReminder : SBObject <RemindersGenericMethods>
// A reminder in the Reminders application
@end
- (id) show; // Show an object in the Reminders UI
@property (copy) NSString *emblem; // The emblem icon name of the list
@property (copy) NSString *color; // The color of the list
@property (copy, readonly) id container; // The container of the list
@property (copy) NSString *name; // The name of the list
- (NSString *) id; // The unique identifier of the list
- (SBElementArray<RemindersReminder *> *) reminders;
@interface RemindersList : SBObject <RemindersGenericMethods>
// A list in the Reminders application
@end
@property (copy, readonly) NSString *name; // The name of the account
- (NSString *) id; // The unique identifier of the account
- (SBElementArray<RemindersReminder *> *) reminders;
- (SBElementArray<RemindersList *> *) lists;
@interface RemindersAccount : SBObject <RemindersGenericMethods>
// An account in the Reminders application
@end
Reminders application
@property (copy, readonly) RemindersList *defaultList; // The default list in the
the Reminders application
@property (copy, readonly) RemindersAccount *defaultAccount; // The default account in
- (SBElementArray<RemindersReminder *> *) reminders;

@end
- (id) show; // Show an object in the Reminders UI
@property BOOL flagged; // Whether the reminder is flagged

