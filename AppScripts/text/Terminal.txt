@property (copy, readonly) NSString *version; // The version of the application.
@property (readonly) BOOL frontmost; // Is this the frontmost (active) application?
@property (copy, readonly) NSString *name; // The name of the application.
- (SBElementArray<TerminalWindow *> *) windows;
@interface TerminalApplication : SBApplication
// The application‘s top-level scripting object.
*/
/*
* Standard Suite
@end
- (void) moveTo:(SBObject *)to; // Move object(s) to a new location.
- (BOOL) exists; // Verify if an object exists.
Copy object(s) and put the copies at a new location.
- (void) duplicateTo:(SBObject *)to withProperties:(NSDictionary *)withProperties; //
- (void) delete; // Delete an object.
(BOOL)printDialog; // Print a document.
- (void) printWithProperties:(NSDictionary *)withProperties printDialog:
- (void) saveIn:(NSURL *)in_; // Save a document.
document.
- (void) closeSaving:(TerminalSaveOptions)saving savingIn:(NSURL *)savingIn; // Close a
@protocol TerminalGenericMethods
typedef enum TerminalPrintingErrorHandling TerminalPrintingErrorHandling;
};
PostScript errors */
TerminalPrintingErrorHandlingDetailed = 'lwdt' /* print a detailed report of
*/,
TerminalPrintingErrorHandlingStandard = 'lwst' /* Standard PostScript error handling
enum TerminalPrintingErrorHandling {
typedef enum TerminalSaveOptions TerminalSaveOptions;
};
TerminalSaveOptionsAsk = 'ask ' /* Ask the user whether or not to save the file. */
TerminalSaveOptionsNo = 'no ' /* Do not save the file. */,
TerminalSaveOptionsYes = 'yes ' /* Save the file. */,
enum TerminalSaveOptions {
@class TerminalApplication, TerminalWindow, TerminalSettingsSet, TerminalTab;
#import <ScriptingBridge/ScriptingBridge.h>
#import <AppKit/AppKit.h>
*/
/*
* Terminal.h

@end
window created on application startup.
@property (copy) TerminalSettingsSet *startupSettings; // The settings set used for the
windows.
@property (copy) TerminalSettingsSet *defaultSettings; // The settings set used for new
- (SBElementArray<TerminalSettingsSet *> *) settingsSets;
@interface TerminalApplication (TerminalSuite)
*/
/*
* Terminal Suite
@end
the screen.
@property NSRect frame; // The bounding rectangle, relative to the lower left corner of
@property NSPoint size; // The width and height of the window
corner of the screen.
@property NSPoint origin; // The position of the window, relative to the lower left
corner of the screen.
@property NSPoint position; // The position of the window, relative to the upper left
@property (copy) TerminalTab *selectedTab;
window.
@property BOOL frontmost; // Whether the window is currently the frontmost Terminal
@property BOOL zoomed; // Whether the window is currently zoomed.
@property (readonly) BOOL zoomable; // Whether the window can be zoomed.
@property BOOL visible; // Whether the window is currently visible.
@property (readonly) BOOL resizable; // Whether the window can be resized.
@property BOOL miniaturized; // Whether the window is currently minimized.
@property (readonly) BOOL miniaturizable; // Whether the window can be minimized.
@property (readonly) BOOL closeable; // Whether the window has a close box.
@property NSRect bounds; // The bounding rectangle of the window.
@property NSInteger index; // The index of the window, ordered front to back.
- (NSInteger) id; // The unique identifier of the window.
@property (copy, readonly) NSString *name; // The full title of the window.
- (SBElementArray<TerminalTab *> *) tabs;
@interface TerminalWindow : SBObject <TerminalGenericMethods>
// A window.
@end
command.
- (TerminalTab *) doScript:(NSString *)x in:(id)in_; // Runs a UNIX shell script or
- (void) quitSaving:(TerminalSaveOptions)saving; // Quit the application.
(BOOL)printDialog; // Print a document.
- (void) print:(id)x withProperties:(NSDictionary *)withProperties printDialog:
- (void) open:(NSArray<NSURL *> *)x; // Open a document.

@property (copy) NSArray<NSString *> *cleanCommands; // The processes which will be
@property (copy) NSColor *boldTextColor; // The bold text color for the tab.
@property (copy) NSColor *normalTextColor; // The normal text color for the tab.
@property (copy) NSColor *backgroundColor; // The background color for the tab.
@property (copy) NSColor *cursorColor; // The cursor color for the tab.
control the tab’s behavior and appearance.
@property (copy) TerminalSettingsSet *currentSettings; // The set of settings which
@property (copy, readonly) NSString *tty; // The tab’s TTY device.
@property (copy) NSString *customTitle; // The tab’s custom title.
@property BOOL titleDisplaysCustomTitle; // Whether the title contains a custom title.
@property BOOL selected; // Whether the tab is selected.
running in the tab.
@property (copy, readonly) NSArray<NSString *> *processes; // The processes currently
@property (readonly) BOOL busy; // Whether the tab is busy running a process.
buffer of the tab.
@property (copy, readonly) NSString *history; // The contents of the entire scrolling
tab.
@property (copy, readonly) NSString *contents; // The currently visible contents of the
@property NSInteger numberOfColumns; // The number of columns displayed in the tab.
@property NSInteger numberOfRows; // The number of rows displayed in the tab.
@interface TerminalTab : SBObject <TerminalGenericMethods>
// A tab.
@end
@property (copy) NSString *customTitle; // The tab’s custom title.
@property BOOL titleDisplaysCustomTitle; // Whether the title contains a custom title.
name.
@property BOOL titleDisplaysSettingsName; // Whether the title contains the settings
rows and columns.
@property BOOL titleDisplaysWindowSize; // Whether the title contains the tab’s size, in
@property BOOL titleDisplaysShellPath; // Whether the title contains the shell path.
@property BOOL titleDisplaysDeviceName; // Whether the title contains the device name.
ignored when checking whether a tab can be closed without showing a prompt.
@property (copy) NSArray<NSString *> *cleanCommands; // The processes which will be
is antialiased.
@property BOOL fontAntialiasing; // Whether the font used to display the tab’s contents
contents.
@property NSInteger fontSize; // The size of the font used to display the tab’s
contents.
@property (copy) NSString *fontName; // The name of the font used to display the tab’s
@property (copy) NSColor *boldTextColor; // The bold text color for the tab.
@property (copy) NSColor *normalTextColor; // The normal text color for the tab.
@property (copy) NSColor *backgroundColor; // The background color for the tab.
@property (copy) NSColor *cursorColor; // The cursor color for the tab.
@property NSInteger numberOfColumns; // The number of columns displayed in the tab.
@property NSInteger numberOfRows; // The number of rows displayed in the tab.
@property (copy) NSString *name; // The name of the settings set.
- (NSInteger) id; // The unique identifier of the settings set.
@interface TerminalSettingsSet : SBObject <TerminalGenericMethods>
// A set of settings.

@end
is antialiased.
@property BOOL fontAntialiasing; // Whether the font used to display the tab’s contents
contents.
@property NSInteger fontSize; // The size of the font used to display the tab’s
contents.
@property (copy) NSString *fontName; // The name of the font used to display the tab’s
@property BOOL titleDisplaysFileName; // Whether the title contains the file name.
rows and columns.
@property BOOL titleDisplaysWindowSize; // Whether the title contains the tab’s size, in
@property BOOL titleDisplaysShellPath; // Whether the title contains the shell path.
@property BOOL titleDisplaysDeviceName; // Whether the title contains the device name.
ignored when checking whether a tab can be closed without showing a prompt.

