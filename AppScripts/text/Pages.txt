PagesNMCTDateAndTime = 'fdtm' /* Date and time format */,
PagesNMCTCurrency = 'fcur' /* Currency number format */,
PagesNMCTCheckbox = 'fcch' /* Checkbox control format (Numbers only) */,
PagesNMCTAutomatic = 'faut' /* Automatic format */,
enum PagesNMCT {
typedef enum PagesNMSD PagesNMSD;
};
PagesNMSDDescending = 'dscn' /* Sort in decreasing value order */
PagesNMSDAscending = 'ascn' /* Sort in increasing value order */,
enum PagesNMSD {
typedef enum PagesTAHT PagesTAHT;
};
PagesTAHTRight = 'arit' /* Right-align content. */
PagesTAHTLeft = 'alft' /* Left-align content. */,
PagesTAHTJustify = 'ajst' /* Fully justify (left and right) content. */,
PagesTAHTCenter = 'actr' /* Center-align content. */,
PagesTAHTAutoAlign = 'aaut' /* Auto-align based on content type. */,
enum PagesTAHT {
typedef enum PagesTAVT PagesTAVT;
};
PagesTAVTTop = 'avtp' /* Top-align content. */
PagesTAVTCenter = 'actr' /* Center-align content. */,
PagesTAVTBottom = 'avbt' /* Right-align content. */,
enum PagesTAVT {
typedef enum PagesPrintingErrorHandling PagesPrintingErrorHandling;
};
errors */
PagesPrintingErrorHandlingDetailed = 'lwdt' /* print a detailed report of PostScript
PagesPrintingErrorHandlingStandard = 'lwst' /* Standard PostScript error handling */,
enum PagesPrintingErrorHandling {
typedef enum PagesSaveOptions PagesSaveOptions;
};
PagesSaveOptionsAsk = 'ask ' /* Ask the user whether or not to save the file. */
PagesSaveOptionsNo = 'no ' /* Do not save the file. */,
PagesSaveOptionsYes = 'yes ' /* Save the file. */,
enum PagesSaveOptions {
PagesPage, PagesPlaceholderText;
PagesTextItem, PagesRange, PagesCell, PagesRow, PagesColumn, PagesTemplate, PagesSection,
PagesShape, PagesChart, PagesImage, PagesGroup, PagesLine, PagesMovie, PagesTable,
PagesParagraph, PagesWord, PagesIWorkContainer, PagesIWorkItem, PagesAudioClip,
@class PagesApplication, PagesDocument, PagesWindow, PagesRichText, PagesCharacter,
#import <ScriptingBridge/ScriptingBridge.h>
#import <AppKit/AppKit.h>
*/
* Pages.h
/*

@protocol PagesGenericMethods
typedef enum PagesImageQuality PagesImageQuality;
};
PagesImageQualityBest = 'PgP2' /* best quality */
PagesImageQualityBetter = 'PgP1' /* better quality */,
PagesImageQualityGood = 'PgP0' /* good quality */,
enum PagesImageQuality {
typedef enum PagesExportFormat PagesExportFormat;
};
PagesExportFormatFormattedText = 'Prtf' /* RTF */
PagesExportFormatPages09 = 'PPag' /* Pages 09 */,
PagesExportFormatMicrosoftWord = 'Pwrd' /* Microsoft Word */,
PagesExportFormatPDF = 'Ppdf' /* PDF */,
PagesExportFormatUnformattedText = 'Ptxf' /* Plain text */,
PagesExportFormatEPUB = 'Pepu' /* EPUB */,
enum PagesExportFormat {
typedef enum PagesSaveableFileFormat PagesSaveableFileFormat;
};
PagesSaveableFileFormatPagesFormat = 'Pgff' /* The Pages native file format */
enum PagesSaveableFileFormat {
typedef enum PagesPlaybackRepetitionMethod PagesPlaybackRepetitionMethod;
};
PagesPlaybackRepetitionMethodLoopBackAndForth = 'mvbf' /* */
PagesPlaybackRepetitionMethodLoop = 'mvlp' /* */,
PagesPlaybackRepetitionMethodNone = 'mvrn' /* */,
enum PagesPlaybackRepetitionMethod {
typedef enum PagesItemFillOptions PagesItemFillOptions;
};
PagesItemFillOptionsAdvancedImageFill = 'fiai' /* */
PagesItemFillOptionsImageFill = 'fiim' /* */,
PagesItemFillOptionsAdvancedGradientFill = 'fiag' /* */,
PagesItemFillOptionsGradientFill = 'figr' /* */,
PagesItemFillOptionsColorFill = 'fico' /* */,
PagesItemFillOptionsNoFill = 'fino' /* */,
enum PagesItemFillOptions {
typedef enum PagesNMCT PagesNMCT;
};
PagesNMCTNumeralSystem = 'fcns' /* Numeral System */
PagesNMCTRating = 'frat' /* Rating format. (Numbers only) */,
PagesNMCTDuration = 'fdur' /* Duration format */,
PagesNMCTText = 'ctxt' /* Text format */,
PagesNMCTStepper = 'fcst' /* Stepper control format (Numbers only) */,
PagesNMCTSlider = 'fcsl' /* Slider control format (Numbers only) */,
PagesNMCTScientific = 'fsci' /* Scientific notation format */,
PagesNMCTPopUpMenu = 'fcpp' /* Pop-up menu control format (Numbers only) */,
PagesNMCTPercent = 'fper' /* Percentage number format */,
PagesNMCTNumber = 'nmbr' /* Decimal number format */,
PagesNMCTFraction = 'ffra' /* Fraction number format */,

@interface PagesWindow : SBObject <PagesGenericMethods>
// A window.
@end
*)withProperties; // Export a document to another file
- (void) exportTo:(NSURL *)to as:(PagesExportFormat)as withProperties:(NSDictionary
@property (copy, readonly) NSURL *file; // Its location on disk, if it has one.
@property (readonly) BOOL modified; // Has it been modified since the last save?
@property (copy, readonly) NSString *name; // Its name.
@interface PagesDocument : SBObject <PagesGenericMethods>
// A document.
@end
from the document.
- (void) removePassword:(NSString *)x from:(PagesDocument *)from; // Remove the password
savingInKeychain:(BOOL)savingInKeychain; // Set a password to an unencrypted document.
- (void) setPassword:(NSString *)x to:(PagesDocument *)to hint:(NSString *)hint
- (BOOL) exists:(id)x; // Verify that an object exists.
- (void) quitSaving:(PagesSaveOptions)saving; // Quit the application.
(BOOL)printDialog; // Print a document.
- (void) print:(id)x withProperties:(NSDictionary *)withProperties printDialog:
- (id) open:(id)x; // Open a document.
@property (copy, readonly) NSString *version; // The version number of the application.
@property (readonly) BOOL frontmost; // Is this the active application?
@property (copy, readonly) NSString *name; // The name of the application.
- (SBElementArray<PagesWindow *> *) windows;
- (SBElementArray<PagesDocument *> *) documents;
@interface PagesApplication : SBApplication
// The application's top-level scripting object.
*/
/*
* Standard Suite
@end
- (void) delete; // Delete an object.
- (void) moveTo:(SBObject *)to; // Move an object to a new location.
Copy an object.
- (void) duplicateTo:(SBObject *)to withProperties:(NSDictionary *)withProperties; //
- (void) delete; // Delete an object.
(BOOL)printDialog; // Print a document.
- (void) printWithProperties:(NSDictionary *)withProperties printDialog:
- (void) saveIn:(NSURL *)in_ as:(PagesSaveableFileFormat)as; // Save a document.
document.
- (void) closeSaving:(PagesSaveOptions)saving savingIn:(NSURL *)savingIn; // Close a

@end
- (SBElementArray<PagesWord *> *) words;
- (SBElementArray<PagesCharacter *> *) characters;
@interface PagesParagraph : PagesRichText
// One of some text's paragraphs.
@end
@interface PagesCharacter : PagesRichText
// One of some text's characters.
@end
@property double size; // The size of the font.
the Font Book application get the information about a typeface.
such as: “TimesNewRomanPS-ItalicMT”, or display name: “Times New Roman Italic”. TIP: Use
@property (copy) NSString *font; // The name of the font. Can be the PostScript name,
consisting of a list of three color values from 0 to 65535. ex: Blue = {0, 0, 65535}.
@property (copy) NSColor *color; // The color of the font. Expressed as an RGB value
- (SBElementArray<PagesWord *> *) words;
- (SBElementArray<PagesParagraph *> *) paragraphs;
- (SBElementArray<PagesCharacter *> *) characters;
@interface PagesRichText : SBObject <PagesGenericMethods>
// This provides the base rich text class for all iWork applications.
*/
/*
* iWork Text Suite
@end
displayed in the window.
@property (copy, readonly) PagesDocument *document; // The document whose contents are
@property BOOL zoomed; // Is the window zoomed right now?
@property (readonly) BOOL zoomable; // Does the window have a zoom button?
@property BOOL visible; // Is the window visible right now?
@property (readonly) BOOL resizable; // Can the window be resized?
@property BOOL miniaturized; // Is the window minimized right now?
@property (readonly) BOOL miniaturizable; // Does the window have a minimize button?
@property (readonly) BOOL closeable; // Does the window have a close button?
@property NSRect bounds; // The bounding rectangle of the window.
@property NSInteger index; // The index of the window, ordered front to back.
- (NSInteger) id; // The unique identifier of the window.
@property (copy, readonly) NSString *name; // The title of the window.

@end
@property NSInteger width; // The width of the iWork item.
point of the iWork item.
@property NSPoint position; // The horizontal and vertical coordinates of the top left
containing this iWork item.
@property (copy, readonly) PagesIWorkContainer *parent; // The iWork container
@property BOOL locked; // Whether the object is locked.
@property NSInteger height; // The height of the iWork item.
@interface PagesIWorkItem : SBObject <PagesGenericMethods>
// An item which supports formatting
@end
- (SBElementArray<PagesTextItem *> *) textItems;
- (SBElementArray<PagesTable *> *) tables;
- (SBElementArray<PagesShape *> *) shapes;
- (SBElementArray<PagesMovie *> *) movies;
- (SBElementArray<PagesLine *> *) lines;
- (SBElementArray<PagesGroup *> *) groups;
- (SBElementArray<PagesIWorkItem *> *) iWorkItems;
- (SBElementArray<PagesImage *> *) images;
- (SBElementArray<PagesChart *> *) charts;
- (SBElementArray<PagesAudioClip *> *) audioClips;
@interface PagesIWorkContainer : SBObject <PagesGenericMethods>
// A container for iWork items
@end
protected or not.
@property (readonly) BOOL passwordProtected; // Whether the document is password
selected items.
@property (copy) NSArray<PagesIWorkItem *> *selection; // A list of the currently
@interface PagesDocument (IWorkSuite)
*/
/*
* iWork Suite
@end
- (SBElementArray<PagesCharacter *> *) characters;
@interface PagesWord : PagesRichText
// One of some text's words.

@property NSInteger height; // The height of the iWork item.
@interface PagesGroup : PagesIWorkContainer
// A group container
@end
359.
@property NSInteger rotation; // The rotation of the iWork item, in degrees from 0 to
from 0 (none) to 100 (full).
@property NSInteger reflectionValue; // The percentage of reflection of the iWork item,
@property BOOL reflectionShowing; // Is the iWork item displaying a reflection?
@property NSInteger opacity; // The opacity of the object, in percent.
@property (copy) id fileName; // The name of the image file.
@property (copy, readonly) NSURL *file; // The image file.
aloud by VoiceOver.
@property (copy) NSString *objectDescription; // Text associated with the image, read
@interface PagesImage : PagesIWorkItem
// An image container
@end
@interface PagesChart : PagesIWorkItem
// A chart
@end
@property NSInteger opacity; // The opacity of the object, in percent.
359.
@property NSInteger rotation; // The rotation of the iWork item, in degrees from 0 to
from 0 (none) to 100 (full).
@property NSInteger reflectionValue; // The percentage of reflection of the iWork item,
@property BOOL reflectionShowing; // Is the iWork item displaying a reflection?
@property (copy) PagesRichText *objectText; // The text contained within the shape.
for the shape.
@property (readonly) PagesItemFillOptions backgroundFillType; // The background, if any,
@interface PagesShape : PagesIWorkItem
// A shape container
@end
repeats.
@property PagesPlaybackRepetitionMethod repetitionMethod; // If or how the audio clip
to 100 (full volume).
@property NSInteger clipVolume; // The volume setting for the audio clip, from 0 (none)
@property (copy) id fileName; // The name of the audio file.
@interface PagesAudioClip : PagesIWorkItem
// An audio clip

@property (copy, readonly) PagesRange *cellRange; // The range describing every cell in
@property (copy) NSString *name; // The item's name.
- (SBElementArray<PagesRange *> *) ranges;
- (SBElementArray<PagesColumn *> *) columns;
- (SBElementArray<PagesRow *> *) rows;
- (SBElementArray<PagesCell *> *) cells;
@interface PagesTable : PagesIWorkItem
// A table
@end
359.
@property NSInteger rotation; // The rotation of the iWork item, in degrees from 0 to
repeats.
@property PagesPlaybackRepetitionMethod repetitionMethod; // If or how the movie
from 0 (none) to 100 (full).
@property NSInteger reflectionValue; // The percentage of reflection of the iWork item,
@property BOOL reflectionShowing; // Is the iWork item displaying a reflection?
@property NSInteger opacity; // The opacity of the object, in percent.
100 (full volume).
@property NSInteger movieVolume; // The volume setting for the movie, from 0 (none) to
@property (copy) id fileName; // The name of the movie file.
@interface PagesMovie : PagesIWorkItem
// A movie container
@end
vertical position of the line starting point.
@property NSPoint startPoint; // A list of two numbers indicating the horizontal and
359.
@property NSInteger rotation; // The rotation of the iWork item, in degrees from 0 to
from 0 (none) to 100 (full).
@property NSInteger reflectionValue; // The percentage of reflection of the iWork item,
@property BOOL reflectionShowing; // Is the iWork item displaying a reflection?
vertical position of the line ending point.
@property NSPoint endPoint; // A list of two numbers indicating the horizontal and
@interface PagesLine : PagesIWorkItem
// A line
@end
359.
@property NSInteger rotation; // The rotation of the iWork item, in degrees from 0 to
@property NSInteger width; // The width of the iWork item.
point of the iWork item.
@property NSPoint position; // The horizontal and vertical coordinates of the top left
containing this iWork item.
@property (copy, readonly) PagesIWorkContainer *parent; // The iWork container

@end
- (void) unmerge; // Unmerge all merged cells in a specified range.
- (void) merge; // Merge a specified range of cells.
formatting and style.
- (void) clear; // Clear the contents of a specified range of cells, including
range's cells.
@property PagesTAVT verticalAlignment; // The vertical alignment of content in the
@property (copy) NSColor *backgroundColor; // The background color of the range's cells.
@property BOOL textWrap; // Whether text should wrap in the range's cells.
@property (copy) NSColor *textColor; // The text color of the range's cells.
@property (copy, readonly) NSString *name; // The range's coordinates.
cells.
@property PagesTAHT alignment; // The horizontal alignment of content in the range's
@property PagesNMCT format; // The format of the range's cells.
@property double fontSize; // The font size of the range's cells.
@property (copy) NSString *fontName; // The font of the range's cells.
- (SBElementArray<PagesRow *> *) rows;
- (SBElementArray<PagesColumn *> *) columns;
- (SBElementArray<PagesCell *> *) cells;
@interface PagesRange : SBObject <PagesGenericMethods>
// A range of cells in a table
@end
359.
@property NSInteger rotation; // The rotation of the iWork item, in degrees from 0 to
from 0 (none) to 100 (full).
@property NSInteger reflectionValue; // The percentage of reflection of the iWork item,
@property BOOL reflectionShowing; // Is the iWork item displaying a reflection?
@property NSInteger opacity; // The opacity of the object, in percent.
@property (copy) PagesRichText *objectText; // The text contained within the text item.
for the text item.
@property (readonly) PagesItemFillOptions backgroundFillType; // The background, if any,
@interface PagesTextItem : PagesIWorkItem
// A text container
@end
*)inRows; // Sort the rows of the table.
- (void) sortBy:(PagesColumn *)by direction:(PagesNMSD)direction inRows:(PagesRange
@property NSInteger footerRowCount; // The number of footer rows in the table.
@property NSInteger headerColumnCount; // The number of header columns in the table.
@property NSInteger headerRowCount; // The number of header rows in the table.
@property NSInteger columnCount; // The number of columns in the table.
@property NSInteger rowCount; // The number of rows in the table.
table.
@property (copy) PagesRange *selectionRange; // The cells currently selected in the
the table.

@property BOOL twoUp; // Whether the window is displaying pages as two up.
@interface PagesWindow (PagesSuite)
// A Pages document window.
@end
- (SBElementArray<PagesTemplate *> *) templates;
@interface PagesApplication (PagesSuite)
// The Pages application.
*/
/*
* Pages Suite
@end
@property double width; // The width of the column.
second column has address 2).
@property (readonly) NSInteger address; // The column's index in the table (e.g., the
@interface PagesColumn : PagesRange
// A column of cells in a table
@end
@property double height; // The height of the row.
second row has address 2).
@property (readonly) NSInteger address; // The row's index in the table (e.g., the
@interface PagesRow : PagesRange
// A row of cells in a table
@end
value of a cell to a formula as text, use the value property.
=SUM(40+2). If the cell does not contain a formula, returns missing value. To set the
@property (copy, readonly) NSString *formula; // The formula in the cell, as text, e.g.
or missing value if the cell is empty.
@property (copy, readonly) NSString *formattedValue; // The formatted value in the cell,
is empty.
@property (copy) id value; // The actual value in the cell, or missing value if the cell
@property (copy, readonly) PagesRow *row; // The cell's row.
@property (copy, readonly) PagesColumn *column; // The cell's column.
@interface PagesCell : PagesRange
// A cell in a table

@property (copy) PagesRichText *bodyText; // The section body text.
- (SBElementArray<PagesTextItem *> *) textItems;
- (SBElementArray<PagesTable *> *) tables;
- (SBElementArray<PagesShape *> *) shapes;
- (SBElementArray<PagesPage *> *) pages;
- (SBElementArray<PagesMovie *> *) movies;
- (SBElementArray<PagesLine *> *) lines;
- (SBElementArray<PagesIWorkItem *> *) iWorkItems;
- (SBElementArray<PagesImage *> *) images;
- (SBElementArray<PagesGroup *> *) groups;
- (SBElementArray<PagesChart *> *) charts;
- (SBElementArray<PagesAudioClip *> *) audioClips;
@interface PagesSection : SBObject <PagesGenericMethods>
// A section within a document.
@end
@property (copy, readonly) NSString *name; // The localized name displayed to the user.
- (NSString *) id; // The identifier used by the application.
@interface PagesTemplate : SBObject <PagesGenericMethods>
// A styled document layout.
@end
@property (copy, readonly) PagesPage *currentPage; // Current page of the document.
@property BOOL facingPages; // Whether the document has facing pages.
@property (readonly) BOOL documentBody; // Whether the document has body text.
@property (copy) PagesRichText *bodyText; // The document body text.
the document.
@property (copy, readonly) PagesTemplate *documentTemplate; // The template assigned to
- (NSString *) id; // Document ID.
- (SBElementArray<PagesPlaceholderText *> *) placeholderTexts;
- (SBElementArray<PagesTextItem *> *) textItems;
- (SBElementArray<PagesTable *> *) tables;
- (SBElementArray<PagesShape *> *) shapes;
- (SBElementArray<PagesSection *> *) sections;
- (SBElementArray<PagesPage *> *) pages;
- (SBElementArray<PagesMovie *> *) movies;
- (SBElementArray<PagesLine *> *) lines;
- (SBElementArray<PagesIWorkItem *> *) iWorkItems;
- (SBElementArray<PagesImage *> *) images;
- (SBElementArray<PagesGroup *> *) groups;
- (SBElementArray<PagesChart *> *) charts;
- (SBElementArray<PagesAudioClip *> *) audioClips;
@interface PagesDocument (PagesSuite)
// A Pages document.
@end

@end
@property (copy) NSString *tag; // Its script tag.
@interface PagesPlaceholderText : PagesRichText
// One of some text's placeholders.
@end
- (SBElementArray<PagesPlaceholderText *> *) placeholderTexts;
@interface PagesParagraph (PagesSuite)
// One of some text's paragraphs.
@end
- (SBElementArray<PagesPlaceholderText *> *) placeholderTexts;
@interface PagesRichText (PagesSuite)
// This modifies the iWork rich text class for all Pages.
@end
@property (copy) PagesRichText *bodyText; // The page body text.
@interface PagesPage : PagesIWorkContainer
// A page of the document.
@end

