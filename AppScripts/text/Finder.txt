FinderIpnlMemoryPanel = 'mpnl',
FinderIpnlSharingPanel = 'spnl',
FinderIpnlGeneralInformationPanel = 'gpnl',
enum FinderIpnl {
typedef enum FinderEdfm FinderEdfm;
};
FinderEdfmUnknownFormat = 'df\?\?'
FinderEdfmSMBFormat = 'dfsm',
FinderEdfmExFATFormat = 'dfxf',
FinderEdfmAPFSFormat = 'dfap',
FinderEdfmXsanFormat = 'dfac',
FinderEdfmPacketWrittenUDFFormat = 'dfpu',
FinderEdfmFTPFormat = 'dfft',
FinderEdfmWebDAVFormat = 'dfwd',
FinderEdfmUDFFormat = 'dfud',
FinderEdfmAppleShareFormat = 'dfas',
FinderEdfmApplePhotoFormat = 'dfph',
FinderEdfmQuickTakeFormat = 'dfqt',
FinderEdfmHighSierraFormat = 'dfhs',
FinderEdfmISO9660Format = 'df96',
FinderEdfmNTFSFormat = 'dfnt',
FinderEdfmMSDOSFormat = 'dfms',
FinderEdfmProDOSFormat = 'dfpr',
FinderEdfmAudioFormat = 'dfau',
FinderEdfmNFSFormat = 'dfnf',
FinderEdfmUFSFormat = 'dfuf',
FinderEdfmMacOSExtendedFormat = 'dfh+',
FinderEdfmMacOSFormat = 'dfhf',
enum FinderEdfm {
typedef enum FinderPriv FinderPriv;
};
FinderPrivNone = 'none'
FinderPrivWriteOnly = 'writ',
FinderPrivReadWrite = 'rdwr',
FinderPrivReadOnly = 'read',
enum FinderPriv {
FinderColumn, FinderAliasList;
FinderIconFamily, FinderIconViewOptions, FinderColumnViewOptions, FinderListViewOptions,
FinderApplicationProcess, FinderDeskAccessoryProcess, FinderPreferences, FinderLabel,
FinderInformationWindow, FinderPreferencesWindow, FinderClippingWindow, FinderProcess,
FinderPackage, FinderWindow, FinderFinderWindow, FinderDesktopWindow,
FinderApplicationFile, FinderDocumentFile, FinderInternetLocationFile, FinderClipping,
FinderFolder, FinderDesktopObject, FinderTrashObject, FinderFile, FinderAliasFile,
@class FinderApplication, FinderItem, FinderContainer, FinderComputerObject, FinderDisk,
#import <ScriptingBridge/ScriptingBridge.h>
#import <AppKit/AppKit.h>
*/
/*
* Finder.h

enum FinderElsv {
typedef enum FinderSodr FinderSodr;
};
FinderSodrReversed = 'srvs'
FinderSodrNormal = 'snrm',
enum FinderSodr {
typedef enum FinderEpos FinderEpos;
};
FinderEposBottom = 'lbot'
FinderEposRight = 'lrgt',
enum FinderEpos {
typedef enum FinderEarr FinderEarr;
};
FinderEarrArrangedByLabel = 'laba'
FinderEarrArrangedByKind = 'kina',
FinderEarrArrangedBySize = 'siza',
FinderEarrArrangedByCreationDate = 'cdta',
FinderEarrArrangedByModificationDate = 'mdta',
FinderEarrArrangedByName = 'nama',
FinderEarrSnapToGrid = 'grda',
FinderEarrNotArranged = 'narr',
enum FinderEarr {
typedef enum FinderEcvw FinderEcvw;
};
FinderEcvwFlowView = 'flvw'
FinderEcvwGroupView = 'flvw',
FinderEcvwColumnView = 'clvw',
FinderEcvwListView = 'lsvw',
FinderEcvwIconView = 'icnv',
enum FinderEcvw {
typedef enum FinderPple FinderPple;
};
FinderPpleAdvancedPreferencesPanel = 'padv'
FinderPpleSidebarPreferencesPanel = 'psid',
FinderPpleLabelPreferencesPanel = 'plbp',
FinderPpleGeneralPreferencesPanel = 'pgnp',
enum FinderPple {
typedef enum FinderIpnl FinderIpnl;
};
FinderIpnlSimpleHeaderPanel = 'shnl'
FinderIpnlMoreInfoPanel = 'minl',
FinderIpnlBurningPanel = 'bpnl',
FinderIpnlContentIndexPanel = 'cinl',
FinderIpnlCommentsPanel = 'cpnl',
FinderIpnlNameExtensionPanel = 'npnl',
FinderIpnlPluginsPanel = 'pkpg',
FinderIpnlLanguagesPanel = 'pklg',
FinderIpnlApplicationPanel = 'apnl',
FinderIpnlPreviewPanel = 'vpnl',

@interface FinderApplication : SBApplication
// The Finder
*/
/*
* Finder Basics
@end
their on-disk representation
(BOOL)registeringApplications; // Update the display of the specified object(s) to match
- (void) updateNecessity:(BOOL)necessity registeringApplications:
- (void) reveal; // Bring the specified object(s) into view
- (void) erase; // (NOT AVAILABLE) Erase the specified disk(s)
- (void) emptySecurity:(BOOL)security; // Empty the trash
- (void) eject; // Eject the specified disk(s)
windows in icon view that are not kept arranged)
- (void) cleanUpBy:(SEL)by; // Arrange items in window nicely (only applies to open
- (SBObject *) sortBy:(SEL)by; // Return the specified object(s) in a sorted list
- (void) select; // Select the specified object(s)
location
*)positionedAt routingSuppressed:(BOOL)routingSuppressed; // Move object(s) to a new
- (SBObject *) moveTo:(SBObject *)to replacing:(BOOL)replacing positionedAt:(NSArray
- (BOOL) exists; // Verify if an object exists
(BOOL)routingSuppressed exactCopy:(BOOL)exactCopy; // Duplicate one or more object(s)
- (SBObject *) duplicateTo:(SBObject *)to replacing:(BOOL)replacing routingSuppressed:
- (SBObject *) delete; // Move an item from its container to the trash
- (NSInteger) dataSizeAs:(NSNumber *)as; // Return the size in bytes of an object
- (void) close; // Close an object
- (void) activate; // Activate the specified window (or the Finder)
object(s)
- (void) printWithProperties:(NSDictionary *)withProperties; // Print the specified
Open the specified object(s)
- (void) openUsing:(SBObject *)using_ withProperties:(NSDictionary *)withProperties; //
@protocol FinderGenericMethods
typedef enum FinderLvic FinderLvic;
};
FinderLvicLargeIcon = 'lgic'
FinderLvicSmallIcon = 'smic',
enum FinderLvic {
typedef enum FinderElsv FinderElsv;
};
FinderElsvCommentColumn = 'elsC'
FinderElsvVersionColumn = 'elsv',
FinderElsvLabelColumn = 'elsl',
FinderElsvKindColumn = 'elsk',
FinderElsvSizeColumn = 'elss',
FinderElsvCreationDateColumn = 'elsc',
FinderElsvModificationDateColumn = 'elsm',
FinderElsvNameColumn = 'elsn',

// An item
*/
/*
* Finder items
@end
- (void) sleep; // Put the computer to sleep
- (void) shutDown; // Shut Down the computer
- (void) restart; // Restart the computer
- (void) emptySecurity:(BOOL)security; // Empty the trash
- (void) eject; // Eject the specified disk(s)
the clipboard (the Finder must be the front application)
- (void) copy NS_RETURNS_NOT_RETAINED; // (NOT AVAILABLE YET) Copy the selected items to
- (void) activate; // Activate the specified window (or the Finder)
- (void) quit; // Quit the Finder
that apply to the Finder as a whole
@property (copy, readonly) FinderPreferences *FinderPreferences; // Various preferences
location (as in Go > Computer)
@property (copy, readonly) FinderComputerObject *computerContainer; // the computer
@property (copy, readonly) FinderFolder *home; // the home directory
@property (copy, readonly) FinderTrashObject *trash; // the trash
@property (copy, readonly) FinderDesktopObject *desktop; // the desktop
@property (copy, readonly) FinderDisk *startupDisk; // the startup disk
@property (copy, readonly) NSString *version; // the version of the Finder
software running on this computer
@property (copy, readonly) NSString *productVersion; // the version of the System
folder would appear if “New Folder” was selected
@property (copy, readonly) SBObject *insertionLocation; // the container in which a new
@property (copy) SBObject *selection; // the selection in the frontmost Finder window
@property BOOL frontmost; // Is the Finder the frontmost process?
@property BOOL visible; // Is the Finder’s layer visible?
@property (copy, readonly) NSString *name; // the Finder’s name
clipboard window
@property (copy, readonly) SBObject *clipboard; // (NOT AVAILABLE YET) the Finder’s
- (SBElementArray<FinderClippingWindow *> *) clippingWindows;
- (SBElementArray<FinderFinderWindow *> *) FinderWindows;
- (SBElementArray<FinderWindow *> *) windows;
- (SBElementArray<FinderPackage *> *) packages;
- (SBElementArray<FinderClipping *> *) clippings;
- (SBElementArray<FinderInternetLocationFile *> *) internetLocationFiles;
- (SBElementArray<FinderDocumentFile *> *) documentFiles;
- (SBElementArray<FinderApplicationFile *> *) applicationFiles;
- (SBElementArray<FinderAliasFile *> *) aliasFiles;
- (SBElementArray<FinderFile *> *) files;
- (SBElementArray<FinderFolder *> *) folders;
- (SBElementArray<FinderDisk *> *) disks;
- (SBElementArray<FinderContainer *> *) containers;
- (SBElementArray<FinderItem *> *) items;

- (SBElementArray<FinderContainer *> *) containers;
- (SBElementArray<FinderItem *> *) items;
@interface FinderContainer : FinderItem
// An item that contains other items
*/
/*
* Containers and folders
@end
@property (copy) NSDictionary *properties; // every property of an item
the item
@property (copy, readonly) SBObject *informationWindow; // the information window for
@property FinderPriv everyonesPrivileges;
@property FinderPriv groupPrivileges;
@property FinderPriv ownerPrivileges;
container
@property (copy) NSString *group; // the user or group that has special access to the
@property (copy) NSString *owner; // the user that owns the container
@property (copy, readonly) NSString *URL; // the URL of the item
@property (copy) FinderIconFamily *icon; // the icon bitmap of the item
modified
@property (copy) NSDate *modificationDate; // the date on which the item was last
created
@property (copy, readonly) NSDate *creationDate; // the date on which the item was
disk
@property (readonly) long long physicalSize; // the actual space used by the item on
@property (readonly) long long size; // the logical size of the item
Info” window
@property (copy) NSString *comment; // the comment of the item, displayed in the “Get
@property (copy, readonly) NSString *objectDescription; // a description of the item
@property (copy, readonly) NSString *kind; // the kind of the item
@property BOOL locked; // Is the file locked?
@property NSInteger labelIndex; // the label of the item
item in a window viewed as icons or buttons)
@property NSRect bounds; // the bounding rectangle of the item (can only be set for an
@property NSPoint desktopPosition; // the position of the item on the desktop
only be set for an item in a window viewed as icons or buttons)
@property NSPoint position; // the position of the item within its parent window (can
@property (copy, readonly) SBObject *disk; // the disk on which the item is stored
@property (copy, readonly) SBObject *container; // the container of the item
its container
@property (readonly) NSInteger index; // the index in the front-to-back ordering within
@property BOOL extensionHidden; // Is the item's extension hidden from the user?
“txt”)
@property (copy) NSString *nameExtension; // the name extension of the item (such as
@property (copy, readonly) NSString *displayedName; // the user-visible name of the item
@property (copy) NSString *name; // the name of the item
@interface FinderItem : SBObject <FinderGenericMethods>

@property (readonly) BOOL journalingEnabled; // Does this disk do file system
@property (readonly) FinderEdfm format; // the filesystem format of this disk
@property (readonly) BOOL startup; // Is this disk the boot disk?
file server)?
@property (readonly) BOOL localVolume; // Is the media a local volume (as opposed to a
on)?
@property (readonly) BOOL ejectable; // Can the media be ejected (floppies, CDs, and so
@property (readonly) long long freeSpace; // the number of free bytes left on the disk
the disk
@property (readonly) long long capacity; // the total number of bytes (free or used) on
and Finder remains running)
- (NSInteger) id; // the unique id for this disk (unchanged while disk remains connected
- (SBElementArray<FinderPackage *> *) packages;
- (SBElementArray<FinderClipping *> *) clippings;
- (SBElementArray<FinderInternetLocationFile *> *) internetLocationFiles;
- (SBElementArray<FinderDocumentFile *> *) documentFiles;
- (SBElementArray<FinderApplicationFile *> *) applicationFiles;
- (SBElementArray<FinderAliasFile *> *) aliasFiles;
- (SBElementArray<FinderFile *> *) files;
- (SBElementArray<FinderFolder *> *) folders;
- (SBElementArray<FinderContainer *> *) containers;
- (SBElementArray<FinderItem *> *) items;
@interface FinderDisk : FinderContainer
// A disk
@end
@interface FinderComputerObject : FinderItem
// the Computer location (as in Go > Computer)
@end
folder
@property (copy, readonly) SBObject *containerWindow; // the container window for this
its children opened as outlines? (can only be set for containers viewed as lists)
@property BOOL completelyExpanded; // (NOT AVAILABLE YET) Are the container and all of
(can only be set for containers viewed as lists)
@property BOOL expanded; // (NOT AVAILABLE YET) Is the container opened as an outline?
being expanded as an outline?
@property (readonly) BOOL expandable; // (NOT AVAILABLE YET) Is the container capable of
container, including the contents of its children
@property (copy, readonly) SBObject *entireContents; // the entire contents of the
- (SBElementArray<FinderPackage *> *) packages;
- (SBElementArray<FinderClipping *> *) clippings;
- (SBElementArray<FinderInternetLocationFile *> *) internetLocationFiles;
- (SBElementArray<FinderDocumentFile *> *) documentFiles;
- (SBElementArray<FinderApplicationFile *> *) applicationFiles;
- (SBElementArray<FinderAliasFile *> *) aliasFiles;
- (SBElementArray<FinderFile *> *) files;
- (SBElementArray<FinderFolder *> *) folders;

- (SBElementArray<FinderPackage *> *) packages;
- (SBElementArray<FinderClipping *> *) clippings;
- (SBElementArray<FinderInternetLocationFile *> *) internetLocationFiles;
- (SBElementArray<FinderDocumentFile *> *) documentFiles;
- (SBElementArray<FinderApplicationFile *> *) applicationFiles;
- (SBElementArray<FinderAliasFile *> *) aliasFiles;
- (SBElementArray<FinderFile *> *) files;
- (SBElementArray<FinderFolder *> *) folders;
- (SBElementArray<FinderContainer *> *) containers;
- (SBElementArray<FinderItem *> *) items;
@interface FinderTrashObject : FinderContainer
// Trash-object is the class of the “trash” object
@end
- (SBElementArray<FinderPackage *> *) packages;
- (SBElementArray<FinderClipping *> *) clippings;
- (SBElementArray<FinderInternetLocationFile *> *) internetLocationFiles;
- (SBElementArray<FinderDocumentFile *> *) documentFiles;
- (SBElementArray<FinderApplicationFile *> *) applicationFiles;
- (SBElementArray<FinderAliasFile *> *) aliasFiles;
- (SBElementArray<FinderFile *> *) files;
- (SBElementArray<FinderFolder *> *) folders;
- (SBElementArray<FinderDisk *> *) disks;
- (SBElementArray<FinderContainer *> *) containers;
- (SBElementArray<FinderItem *> *) items;
@interface FinderDesktopObject : FinderContainer
// Desktop-object is the class of the “desktop” object
@end
- (SBElementArray<FinderPackage *> *) packages;
- (SBElementArray<FinderClipping *> *) clippings;
- (SBElementArray<FinderInternetLocationFile *> *) internetLocationFiles;
- (SBElementArray<FinderDocumentFile *> *) documentFiles;
- (SBElementArray<FinderApplicationFile *> *) applicationFiles;
- (SBElementArray<FinderAliasFile *> *) aliasFiles;
- (SBElementArray<FinderFile *> *) files;
- (SBElementArray<FinderFolder *> *) folders;
- (SBElementArray<FinderContainer *> *) containers;
- (SBElementArray<FinderItem *> *) items;
@interface FinderFolder : FinderContainer
// A folder
@end
@property BOOL ignorePrivileges; // Ignore permissions on this disk?
journaling?

@end
launch in the Classic environment?
@property BOOL opensInClassic; // (AVAILABLE IN 10.1 TO 10.4) Should the application
terminology, i.e., can it be scripted?
@property (readonly) BOOL hasScriptingTerminology; // Does the process have a scripting
aware? (OBSOLETE: always returns true)
@property (readonly) BOOL acceptsHighLevelEvents; // Is the application high-level event
which the application will be launched
@property NSInteger preferredSize; // (AVAILABLE IN 10.1 TO 10.4) the memory size with
with which the application can be launched
@property NSInteger minimumSize; // (AVAILABLE IN 10.1 TO 10.4) the smallest memory size
size with which the developer recommends the application be launched
@property (readonly) NSInteger suggestedSize; // (AVAILABLE IN 10.1 TO 10.4) the memory
- (NSString *) id; // the bundle identifier or creator type of the application
@interface FinderApplicationFile : FinderFile
// An application's file on disk
@end
@property (copy) SBObject *originalItem; // the original item pointed to by the alias
@interface FinderAliasFile : FinderFile
// An alias file (created with “Make Alias”)
@end
bottom of the “Get Info” window)
@property (copy, readonly) NSString *version; // the version of the file (visible at the
(visible at the top of the “Get Info” window)
@property (copy, readonly) NSString *productVersion; // the version of the product
@property BOOL stationery; // Is the file a stationery pad?
created the item
@property (copy) NSNumber *creatorType; // the OSType identifying the application that
contained in the item
@property (copy) NSNumber *fileType; // the OSType identifying the type of data
@interface FinderFile : FinderItem
// A file
*/
* Files
/*
@end
@property BOOL warnsBeforeEmptying; // Display a dialog when emptying the trash?

@property (copy) NSDictionary *properties; // every property of a window
@property BOOL collapsed; // Is the window collapsed
windows)?
@property (readonly) BOOL visible; // Is the window visible (always true for open Finder
@property BOOL zoomed; // Is the window zoomed?
@property (readonly) BOOL zoomable; // Is the window zoomable?
@property (readonly) BOOL resizable; // Is the window resizable?
@property (readonly) BOOL modal; // Is the window modal?
@property (readonly) BOOL floating; // Does the window have a title bar?
@property (readonly) BOOL closeable; // Does the window have a close box?
ordering
@property NSInteger index; // the number of the window in the front-to-back layer
@property (copy, readonly) NSString *name; // the name of the window
@property (readonly) BOOL titled; // Does the window have a title bar?
@property NSRect bounds; // the boundary rectangle for the window
@property NSPoint position; // the upper left position of the window
- (NSInteger) id; // the unique id for this window
@interface FinderWindow : SBObject <FinderGenericMethods>
// A window
*/
/*
* Window classes
@end
@interface FinderPackage : FinderItem
// A package
@end
window for this clipping
@property (copy, readonly) SBObject *clippingWindow; // (NOT AVAILABLE YET) the clipping
@interface FinderClipping : FinderFile
// A clipping
@end
@property (copy, readonly) NSString *location; // the internet location
@interface FinderInternetLocationFile : FinderFile
// A file containing an internet location
@end
@interface FinderDocumentFile : FinderFile
// A document file

@end
@interface FinderClippingWindow : FinderWindow
// The window containing a clipping
@end
@property FinderPple currentPanel; // The current panel in the Finder preferences window
@interface FinderPreferencesWindow : FinderWindow
// The Finder Preferences window
@end
@property FinderIpnl currentPanel; // the current panel in the information window
@property (copy, readonly) SBObject *item; // the item from which this window was opened
@interface FinderInformationWindow : FinderWindow
// An inspector window (opened by “Show Info”)
@end
@interface FinderDesktopWindow : FinderFinderWindow
// the desktop window
@end
@property NSInteger sidebarWidth; // the width of the sidebar for the container window
@property BOOL pathbarVisible; // Is the window's path bar visible?
@property BOOL statusbarVisible; // Is the window's status bar visible?
@property BOOL toolbarVisible; // Is the window's toolbar visible?
view options for the container window
@property (copy, readonly) FinderColumnViewOptions *columnViewOptions; // the column
options for the container window
@property (copy, readonly) FinderListViewOptions *listViewOptions; // the list view
options for the container window
@property (copy, readonly) FinderIconViewOptions *iconViewOptions; // the icon view
@property FinderEcvw currentView; // the current view for the container window
targeted
@property (copy) SBObject *target; // the container at which this file viewer is
@interface FinderFinderWindow : FinderWindow
// A file viewer window
@end

@end
which this process was launched
@property (copy, readonly) SBObject *deskAccessoryFile; // the desk accessory file from
@interface FinderDeskAccessoryProcess : FinderProcess
// A process launched from a desk accessory file
@end
file from which this process was launched
@property (copy, readonly) FinderApplicationFile *applicationFile; // the application
@interface FinderApplicationProcess : FinderProcess
// A process launched from an application file
@end
in the process' partition
@property (readonly) NSInteger partitionSpaceUsed; // the number of bytes currently used
which the process was launched
@property (readonly) NSInteger totalPartitionSize; // the size of the partition with
terminology, i.e., can it be scripted?
@property (readonly) BOOL hasScriptingTerminology; // Does the process have a scripting
@property (readonly) BOOL acceptsRemoteEvents; // Does the process accept remote events?
aware (accepts open application, open document, print document, and quit)?
@property (readonly) BOOL acceptsHighLevelEvents; // Is the process high-level event
process (the signature)
@property (copy, readonly) NSNumber *creatorType; // the OSType of the creator of the
process
@property (copy, readonly) NSNumber *fileType; // the OSType of the file type of the
launched
@property (copy, readonly) SBObject *file; // the file from which the process was
@property BOOL frontmost; // Is the process the frontmost process?
@property BOOL visible; // Is the process' layer visible?
@property (copy, readonly) NSString *name; // the name of the process
@interface FinderProcess : SBObject <FinderGenericMethods>
// A process running on this computer
@end
@property (copy) FinderFile *desktopPicture; // the desktop picture of the main monitor
@interface FinderApplication (LegacySuite)
// The Finder
*/
/*
* Legacy suite

// the icon view options
@end
@interface FinderIconFamily : SBObject <FinderGenericMethods>
// (NOT AVAILABLE YET) A family of icons
@end
@property (copy) NSColor *color; // the color associated with the label
container
@property NSInteger index; // the index in the front-to-back ordering within its
@property (copy) NSString *name; // the name associated with the label
@interface FinderLabel : SBObject <FinderGenericMethods>
// (NOT AVAILABLE YET) A Finder label (name and color)
@end
“extension hidden” is true?
@property BOOL allNameExtensionsShowing; // Show name extensions, even for items whose
@property BOOL newWindowsOpenInColumnView; // Open new windows in column view?
@property BOOL foldersOpenInNewTabs; // Folders open into new tabs?
@property BOOL foldersOpenInNewWindows; // Folders open into new windows?
for a newly-opened Finder window
@property (copy) SBObject *newWindowTarget NS_RETURNS_NOT_RETAINED; // target location
@property BOOL desktopShowsConnectedServers; // Connected servers appear on the desktop?
desktop?
@property BOOL desktopShowsRemovableMedia; // CDs, DVDs, and iPods appear on the
desktop?
@property BOOL desktopShowsExternalHardDisks; // External hard disks appear on the
@property BOOL desktopShowsHardDisks; // Hard disks appear on the desktop?
seconds (from 0.167 to 1.169)
@property double delayBeforeSpringing; // the delay before springing open a container in
@property BOOL foldersSpringOpen; // Spring open folders after the specified delay?
view options for all windows
@property (copy, readonly) FinderColumnViewOptions *columnViewOptions; // the column
view options
@property (copy, readonly) FinderListViewOptions *listViewOptions; // the default list
view options
@property (copy, readonly) FinderIconViewOptions *iconViewOptions; // the default icon
open if Finder preferences was opened
@property (copy, readonly) FinderPreferencesWindow *window; // the window that would
@interface FinderPreferences : SBObject <FinderGenericMethods>
// The Finder Preferences
*/
/*
* Type Definitions

@property (readonly) NSInteger minimumWidth; // the minimum allowed width of this column
@property NSInteger width; // the width of this column
@property FinderSodr sortDirection; // The direction in which the window is sorted
@property (readonly) FinderElsv name; // the column name
container
@property NSInteger index; // the index in the front-to-back ordering within its
@interface FinderColumn : SBObject <FinderGenericMethods>
// a column of a list view
@end
in the list view?
@property BOOL usesRelativeDates; // Are relative dates (e.g., today, yesterday) shown
@property (copy) FinderColumn *sortColumn; // the column that the list view is sorted on
@property NSInteger textSize; // the size of the text displayed in the list view
@property FinderLvic iconSize; // the size of icons displayed in the list view
@property BOOL showsIconPreview; // displays a preview of the item in list view
the window?
@property BOOL calculatesFolderSizes; // Are folder sizes calculated and displayed in
- (SBElementArray<FinderColumn *> *) columns;
@interface FinderListViewOptions : SBObject <FinderGenericMethods>
// the list view options
@end
in column view
@property BOOL disclosesPreviewPane; // discloses the preview pane of the preview column
@property BOOL showsPreviewColumn; // displays the preview column in column view
@property BOOL showsIconPreview; // displays a preview of the item in column view
@property BOOL showsIcon; // displays an icon next to the label in column view
@property NSInteger textSize; // the size of the text displayed in the column view
@interface FinderColumnViewOptions : SBObject <FinderGenericMethods>
// the column view options
@end
@property (copy) NSColor *backgroundColor; // the background color of the icon view
view
@property (copy) FinderFile *backgroundPicture; // the background picture of the icon
icon
@property FinderEpos labelPosition; // the location of the label in reference to the
@property NSInteger textSize; // the size of the text displayed in the icon view
@property BOOL showsIconPreview; // displays a preview of the item in icon view
@property BOOL showsItemInfo; // additional info about an item displayed in icon view
@property NSInteger iconSize; // the size of icons displayed in the icon view
@property FinderEarr arrangement; // the property by which to keep icons arranged
@interface FinderIconViewOptions : SBObject <FinderGenericMethods>

@end
@interface FinderAliasList : SBObject <FinderGenericMethods>
list of file system item references).
// A list of aliases. Use ‘as alias list’ when a list of aliases is needed (instead of a
@end
@property BOOL visible; // is this column visible
@property (readonly) NSInteger maximumWidth; // the maximum allowed width of this column

