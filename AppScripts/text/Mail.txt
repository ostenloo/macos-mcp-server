MailViewerColumnsMessageColor = 'eccl' /* Used to indicate sorting should be done by
attachments a message contains */,
MailViewerColumnsAttachmentsColumn = 'ecat' /* Column containing the number of
enum MailViewerColumns {
typedef enum MailQuotingColor MailQuotingColor;
};
MailQuotingColorYellow = 'ccye' /* Yellow */
MailQuotingColorRed = 'ccre' /* Red */,
MailQuotingColorPurple = 'ccpu' /* Purple */,
MailQuotingColorOther = 'ccot' /* Other */,
MailQuotingColorOrange = 'ccor' /* Orange */,
MailQuotingColorGreen = 'ccgr' /* Green */,
MailQuotingColorBlue = 'ccbl' /* Blue */,
enum MailQuotingColor {
typedef enum MailDefaultMessageFormat MailDefaultMessageFormat;
};
MailDefaultMessageFormatRichFormat = 'dmrt' /* Rich Text */
MailDefaultMessageFormatPlainFormat = 'dmpt' /* Plain Text */,
enum MailDefaultMessageFormat {
typedef enum MailSaveableFileFormat MailSaveableFileFormat;
};
MailSaveableFileFormatNativeFormat = 'item' /* Native format */
enum MailSaveableFileFormat {
typedef enum MailPrintingErrorHandling MailPrintingErrorHandling;
};
errors */
MailPrintingErrorHandlingDetailed = 'lwdt' /* print a detailed report of PostScript
MailPrintingErrorHandlingStandard = 'lwst' /* Standard PostScript error handling */,
enum MailPrintingErrorHandling {
typedef enum MailSaveOptions MailSaveOptions;
};
MailSaveOptionsAsk = 'ask ' /* Ask the user whether or not to save the file. */
MailSaveOptionsNo = 'no ' /* Do not save the file. */,
MailSaveOptionsYes = 'yes ' /* Save the file. */,
enum MailSaveOptions {
MailCcRecipient, MailToRecipient, MailContainer, MailHeader, MailMailAttachment;
MailMailbox, MailRule, MailRuleCondition, MailRecipient, MailBccRecipient,
MailAccount, MailImapAccount, MailICloudAccount, MailPopAccount, MailSmtpServer,
MailLdapServer, MailOLDMessageEditor, MailMessageViewer, MailSignature, MailMessage,
MailParagraph, MailWord, MailCharacter, MailAttributeRun, MailOutgoingMessage,
@class MailApplication, MailDocument, MailWindow, MailRichText, MailAttachment,
#import <ScriptingBridge/ScriptingBridge.h>
#import <AppKit/AppKit.h>
*/
* Mail.h
/*

(deprecated). If you do, Mail will use the 'all messages but omit attachments' policy */,
MailMessageCachingPolicyOnlyMessagesIHaveRead = 'x9wr' /* Do not use this option
policy */,
option (deprecated). If you do, Mail will use the 'all messages but omit attachments'
MailMessageCachingPolicyDoNotKeepCopiesOfAnyMessages = 'x9no' /* Do not use this
enum MailMessageCachingPolicy {
typedef enum MailHighlightColors MailHighlightColors;
};
MailHighlightColorsYellow = 'ccye' /* Yellow */
MailHighlightColorsRed = 'ccre' /* Red */,
MailHighlightColorsPurple = 'ccpu' /* Purple */,
MailHighlightColorsOther = 'ccot' /* Other */,
MailHighlightColorsOrange = 'ccor' /* Orange */,
MailHighlightColorsNone = 'ccno' /* None */,
MailHighlightColorsGreen = 'ccgr' /* Green */,
MailHighlightColorsGray = 'ccgy' /* Gray */,
MailHighlightColorsBlue = 'ccbl' /* Blue */,
enum MailHighlightColors {
typedef enum MailAuthentication MailAuthentication;
};
MailAuthenticationNone = 'ccno' /* None */
MailAuthenticationAppleToken = 'atok' /* Apple token */,
certificate) */,
MailAuthenticationExternal = 'aext' /* External authentication (TLS client
MailAuthenticationMd5 = 'axmd' /* CRAM-MD5 */,
MailAuthenticationNtlm = 'axnt' /* NTLM */,
MailAuthenticationKerberos5 = 'axk5' /* Kerberos V5 (GSSAPI) */,
MailAuthenticationApop = 'aapo' /* APOP */,
MailAuthenticationPassword = 'axct' /* Clear text password */,
enum MailAuthentication {
typedef enum MailViewerColumns MailViewerColumns;
};
message was saved */
MailViewerColumnsDateLastSavedColumn = 'ecls' /* Column containing the date a draft
*/,
MailViewerColumnsToColumn = 'ecto' /* Column containing the recipients of a message
*/,
MailViewerColumnsSubjectColumn = 'ecsu' /* Column containing the subject of a message
MailViewerColumnsSizeColumn = 'ecsz' /* Column containing the size of a message */,
in a mailbox */,
MailViewerColumnsNumberColumn = 'ecnm' /* Column containing the number of a message
(read, unread, replied to, forwarded, etc) */,
MailViewerColumnsMessageStatusColumn = 'ecms' /* Column indicating a messages status
or account a message is in */,
MailViewerColumnsMailboxColumn = 'ecmb' /* Column containing the name of the mailbox
MailViewerColumnsFromColumn = 'ecfr' /* Column containing the sender's name */,
MailViewerColumnsFlagsColumn = 'ecfl' /* Column containing the flags of a message */,
sent */,
MailViewerColumnsDateSentColumn = 'ecds' /* Column containing the date a message was
was received */,
MailViewerColumnsDateReceivedColumn = 'ecdr' /* Column containing the date a message
color */,

@protocol MailGenericMethods
typedef enum MailTypeOfAccount MailTypeOfAccount;
};
MailTypeOfAccountUnknown = 'etun' /* Unknown */
MailTypeOfAccountICloud = 'etit' /* iCloud */,
MailTypeOfAccountImap = 'etim' /* IMAP */,
MailTypeOfAccountSmtp = 'etsm' /* SMTP */,
MailTypeOfAccountPop = 'etpo' /* POP */,
enum MailTypeOfAccount {
typedef enum MailRuleType MailRuleType;
};
MailRuleTypeAttachmentType = 'tatt' /* Attachment Type */
MailRuleTypeToOrCcHeader = 'ttoc' /* To or Cc header */,
MailRuleTypeToHeader = 'ttoo' /* To header */,
MailRuleTypeSubjectHeader = 'tsub' /* Subject header */,
MailRuleTypeSenderIsVIP = 'tsig' /* Sender is VIP */,
MailRuleTypeSenderIsNotMemberOfGroup = 'tsig' /* Sender is not member of group */,
previous recipients */,
MailRuleTypeSenderIsNotInMyPreviousRecipients = 'tnah' /* sender is not in my
MailRuleTypeSenderIsNotInMyContacts = 'tsin' /* Sender is not in my contacts */,
MailRuleTypeSenderIsMemberOfGroup = 'tsim' /* Sender is member of group */,
recipients */,
MailRuleTypeSenderIsInMyPreviousRecipients = 'tsah' /* Sender is in my previous
MailRuleTypeSenderIsInMyContacts = 'tsii' /* Sender is in my contacts */,
MailRuleTypeMessageIsJunkMail = 'tmij' /* Message is junk mail */,
MailRuleTypeMessageContent = 'tmec' /* Message content */,
MailRuleTypeHeaderKey = 'thdk' /* An arbitrary header key */,
MailRuleTypeFromHeader = 'tfro' /* From header */,
MailRuleTypeMatchesEveryMessage = 'tevm' /* Every message */,
MailRuleTypeCcHeader = 'tccc' /* Cc header */,
MailRuleTypeAnyRecipient = 'tanr' /* Any recipient */,
MailRuleTypeAccount = 'tacc' /* Account */,
enum MailRuleType {
typedef enum MailRuleQualifier MailRuleQualifier;
};
MailRuleQualifierNone = 'rqno' /* Indicates no qualifier is applicable */
MailRuleQualifierGreaterThanValue = 'rqgt' /* Greater than value */,
MailRuleQualifierLessThanValue = 'rqlt' /* Less than value */,
MailRuleQualifierEqualToValue = 'rqie' /* Equal to value */,
MailRuleQualifierEndsWithValue = 'rqew' /* Ends with value */,
MailRuleQualifierDoesNotContainValue = 'rqdn' /* Does not contain value */,
MailRuleQualifierDoesContainValue = 'rqco' /* Does contain value */,
MailRuleQualifierBeginsWithValue = 'rqbw' /* Begins with value */,
enum MailRuleQualifier {
typedef enum MailMessageCachingPolicy MailMessageCachingPolicy;
};
their attachments */
omit attachments */,
MailMessageCachingPolicyAllMessagesAndTheirAttachments = 'x9al' /* All messages and
MailMessageCachingPolicyAllMessagesButOmitAttachments = 'x9bo' /* All messages but

@interface MailDocument : SBObject <MailGenericMethods>
// A document.
@end
IMAP account with the server.
- (void) synchronizeWith:(MailAccount *)with; // Command to trigger synchronizing of an
of messages being acted upon.
rules and menus that execute AppleScripts. The direct parameter of this handler is a list
(MailMailbox *)inMailboxes forRule:(MailRule *)forRule; // Script handler invoked by
- (void) performMailActionWithMessages:(NSArray<MailMessage *> *)x inMailboxes:
- (void) mailto:(NSString *)x; // Opens a mailto URL.
- (void) importMailMailboxAt:(NSURL *)at; // Imports a mailbox created by Mail.
- (void) GetURL:(NSString *)x; // Opens a mailto URL.
<jdoe@example.com>" as the direct object would return "jdoe@example.com"
address of a fully specified email address. E.g. Calling this with "John Doe
- (NSString *) extractAddressFrom:(NSString *)x; // Command to get just the email
the direct object would return "John Doe"
fully specified email address. E.g. Calling this with "John Doe <jdoe@example.com>" as
- (NSString *) extractNameFrom:(NSString *)x; // Command to get the full name out of a
- (void) checkForNewMailFor:(MailAccount *)for_; // Triggers a check for email.
- (BOOL) exists:(id)x; // Verify that an object exists.
- (void) quitSaving:(MailSaveOptions)saving; // Quit the application.
(BOOL)printDialog; // Print a document.
- (void) print:(id)x withProperties:(NSDictionary *)withProperties printDialog:
- (id) open:(id)x; // Open a document.
@property (copy, readonly) NSString *version; // The version number of the application.
@property (readonly) BOOL frontmost; // Is this the active application?
@property (copy, readonly) NSString *name; // The name of the application.
- (SBElementArray<MailWindow *> *) windows;
- (SBElementArray<MailDocument *> *) documents;
@interface MailApplication : SBApplication
// The application's top-level scripting object.
*/
/*
* Standard Suite
@end
- (void) moveTo:(SBObject *)to; // Move an object to a new location.
Copy an object.
- (void) duplicateTo:(SBObject *)to withProperties:(NSDictionary *)withProperties; //
- (void) delete; // Delete an object.
(BOOL)printDialog; // Print a document.
- (void) printWithProperties:(NSDictionary *)withProperties printDialog:
- (void) saveIn:(NSURL *)in_ as:(MailSaveableFileFormat)as; // Save a document.
document.
- (void) closeSaving:(MailSaveOptions)saving savingIn:(NSURL *)savingIn; // Close a

@property (copy) NSURL *fileName; // The file for the attachment
@interface MailAttachment : MailRichText
// Represents an inline text attachment. This class is used mainly for make commands.
@end
@property (copy) NSNumber *size; // The size in points of the first character.
@property (copy) NSString *font; // The name of the font of the first character.
@property (copy) NSColor *color; // The color of the first character.
- (SBElementArray<MailAttachment *> *) attachments;
- (SBElementArray<MailAttributeRun *> *) attributeRuns;
- (SBElementArray<MailCharacter *> *) characters;
- (SBElementArray<MailWord *> *) words;
- (SBElementArray<MailParagraph *> *) paragraphs;
@interface MailRichText : SBObject <MailGenericMethods>
// Rich (styled) text
*/
/*
* Text Suite
@end
displayed in the window.
@property (copy, readonly) MailDocument *document; // The document whose contents are
@property BOOL zoomed; // Is the window zoomed right now?
@property (readonly) BOOL zoomable; // Does the window have a zoom button?
@property BOOL visible; // Is the window visible right now?
@property (readonly) BOOL resizable; // Can the window be resized?
@property BOOL miniaturized; // Is the window minimized right now?
@property (readonly) BOOL miniaturizable; // Does the window have a minimize button?
@property (readonly) BOOL closeable; // Does the window have a close button?
@property NSRect bounds; // The bounding rectangle of the window.
@property NSInteger index; // The index of the window, ordered front to back.
- (NSInteger) id; // The unique identifier of the window.
@property (copy, readonly) NSString *name; // The title of the window.
@interface MailWindow : SBObject <MailGenericMethods>
// A window.
@end
@property (copy, readonly) NSURL *file; // Its location on disk, if it has one.
@property (readonly) BOOL modified; // Has it been modified since the last save?
@property (copy, readonly) NSString *name; // Its name.

@property (copy) NSNumber *size; // The size in points of the first character.
@property (copy) NSString *font; // The name of the font of the first character.
@property (copy) NSColor *color; // The color of the first character.
- (SBElementArray<MailAttachment *> *) attachments;
- (SBElementArray<MailCharacter *> *) characters;
- (SBElementArray<MailWord *> *) words;
- (SBElementArray<MailParagraph *> *) paragraphs;
@interface MailAttributeRun : SBObject <MailGenericMethods>
// This subdivides the text into chunks that all have the same attributes.
@end
@property (copy) NSNumber *size; // The size in points of the character.
@property (copy) NSString *font; // The name of the font of the character.
@property (copy) NSColor *color; // The color of the character.
- (SBElementArray<MailAttachment *> *) attachments;
- (SBElementArray<MailAttributeRun *> *) attributeRuns;
@interface MailCharacter : SBObject <MailGenericMethods>
// This subdivides the text into characters.
@end
@property (copy) NSNumber *size; // The size in points of the first character.
@property (copy) NSString *font; // The name of the font of the first character.
@property (copy) NSColor *color; // The color of the first character.
- (SBElementArray<MailAttachment *> *) attachments;
- (SBElementArray<MailAttributeRun *> *) attributeRuns;
- (SBElementArray<MailCharacter *> *) characters;
@interface MailWord : SBObject <MailGenericMethods>
// This subdivides the text into words.
@end
@property (copy) NSNumber *size; // The size in points of the first character.
@property (copy) NSString *font; // The name of the font of the first character.
@property (copy) NSColor *color; // The color of the first character.
- (SBElementArray<MailAttachment *> *) attachments;
- (SBElementArray<MailAttributeRun *> *) attributeRuns;
- (SBElementArray<MailCharacter *> *) characters;
- (SBElementArray<MailWord *> *) words;
@interface MailParagraph : SBObject <MailGenericMethods>
// This subdivides the text into paragraphs.
@end

@property (readonly) NSInteger backgroundActivityCount; // Number of background
fetches of new mail, -1 means to use an automatically determined interval
@property NSInteger fetchInterval; // The interval (in minutes) between automatic
application
@property (copy, readonly) NSString *applicationVersion; // The build number of the
the user has selected
@property (copy, readonly) NSArray<MailMessage *> *selection; // List of messages that
field of messages which you are composing
@property BOOL alwaysCcMyself; // Indicates whether you will be included in the Cc:
field of messages which you are composing
@property BOOL alwaysBccMyself; // Indicates whether you will be included in the Bcc:
- (SBElementArray<MailSignature *> *) signatures;
- (SBElementArray<MailRule *> *) rules;
- (SBElementArray<MailMessageViewer *> *) messageViewers;
- (SBElementArray<MailMailbox *> *) mailboxes;
- (SBElementArray<MailOutgoingMessage *> *) outgoingMessages;
- (SBElementArray<MailSmtpServer *> *) smtpServers;
- (SBElementArray<MailICloudAccount *> *) iCloudAccounts;
- (SBElementArray<MailImapAccount *> *) imapAccounts;
- (SBElementArray<MailPopAccount *> *) popAccounts;
- (SBElementArray<MailAccount *> *) accounts;
@interface MailApplication (Mail)
// Mail's top level scripting object.
@end
- (BOOL) send; // Sends a message.
- (NSInteger) id; // The unique identifier of the message
@property (copy) id messageSignature; // The signature of the message
The default is false
@property BOOL visible; // Controls whether the message window is shown on the screen.
@property (copy) MailRichText *content; // The contents of the message
@property (copy) NSString *subject; // The subject of the message
@property (copy) NSString *sender; // The sender of the message
- (SBElementArray<MailToRecipient *> *) toRecipients;
- (SBElementArray<MailRecipient *> *) recipients;
- (SBElementArray<MailCcRecipient *> *) ccRecipients;
- (SBElementArray<MailBccRecipient *> *) bccRecipients;
@interface MailOutgoingMessage : SBObject <MailGenericMethods>
// A new email message
*/
* Mail
/*
@end

@property (copy, readonly) NSString *primaryEmail; // The user's primary email address
messages?
@property BOOL useFixedWidthFont; // Should fixed-width font be used for plain text
do anything (deprecated)
@property BOOL useAddressCompletion; // This always returns true, and setting it doesn't
@property (copy, readonly) MailMailbox *trashMailbox; // The top level Trash mailbox
conversations should be highlighted in the Mail viewer window when not grouped
@property BOOL highlightSelectedConversation; // Indicates whether messages in
fetched at a specific interval
@property BOOL fetchesAutomatically; // Indicates whether mail will automatically be
@property (copy, readonly) MailMailbox *sentMailbox; // The top level Sent mailbox
'randomly', 'sequentially', or 'none')
@property (copy) NSString *selectedSignature; // Name of current selected signature (or
format as the message to which you are replying
@property BOOL sameReplyFormat; // Indicates whether replies will be in the same text
checking for new mail or if there is a fetch error
various things such as when a messages is sent or if no mail is found when manually
@property BOOL shouldPlayOtherMailSounds; // Indicates whether sounds will be played for
@property (copy, readonly) MailMailbox *outbox; // The top level Out mailbox
sound or 'None' if no sound is selected
@property (copy) NSString *newMailSound NS_RETURNS_NOT_RETAINED; // Name of new mail
@property double messageListFontSize; // Font size for message list
@property (copy) NSString *messageListFont; // Font for message list
@property double messageFontSize; // Font size for messages (proportional font)
@property (copy) NSString *messageFont; // Font for messages (proportional font)
levels of indentation
@property MailQuotingColor levelThreeQuotingColor; // Color for quoted text with three
levels of indentation
@property MailQuotingColor levelTwoQuotingColor; // Color for quoted text with two
of indentation
@property MailQuotingColor levelOneQuotingColor; // Color for quoted text with one level
@property (copy, readonly) MailMailbox *junkMailbox; // The top level Junk mailbox
automatically in messages being composed
@property BOOL checkSpellingWhileTyping; // Indicates whether spelling will be checked
message will be included in replies
@property BOOL quoteOriginalMessage; // Indicates whether the text of the original
message will be quoted or only the text you have selected (if any)
@property BOOL includeAllOriginalMessageText; // Indicates whether all of the original
@property (copy, readonly) MailMailbox *inbox; // The top level In mailbox
'use fixed width font' is set to true
@property double fixedWidthFontSize; // Font size for plain text messages, only used if
'use fixed width font' is set to true
@property (copy) NSString *fixedWidthFont; // Font for plain text messages, only used if
expanded when entered into the address fields of a new compose message
@property BOOL expandGroupAddresses; // Indicates whether group addresses will be
@property (copy, readonly) MailMailbox *draftsMailbox; // The top level Drafts mailbox
HTML messages should be downloaded and displayed
@property BOOL downloadHtmlAttachments; // Indicates whether images and attachments in
being composed or message replies
@property MailDefaultMessageFormat defaultMessageFormat; // Default format for messages
@property BOOL colorQuotedText; // Indicates whether quoted text should be colored
signature directly in a new compose window
@property BOOL chooseSignatureWhenComposing; // Indicates whether user can choose a
activities currently running in Mail, according to the Activity window

- (SBElementArray<MailCcRecipient *> *) ccRecipients;
- (SBElementArray<MailBccRecipient *> *) bccRecipients;
@interface MailMessage : SBObject <MailGenericMethods>
// An email message
*/
/*
* Mail Framework
@end
@property (copy) NSString *name; // Name of the signature
version with fonts and/or styles, that will be returned over the plain text version
@property (copy) NSString *content; // Contents of email signature. If there is a
@interface MailSignature : SBObject <MailGenericMethods>
// Email signatures
@end
@property (copy) MailWindow *window; // The window for the message viewer
currently selected in the list of mailboxes
@property (copy) NSArray<MailMailbox *> *selectedMailboxes; // List of mailboxes
selected
@property (copy) NSArray<MailMessage *> *selectedMessages; // List of messages currently
being displayed in the viewer
@property (copy) NSArray<MailMessage *> *visibleMessages; // List of messages currently
- (NSInteger) id; // The unique identifier of the message viewer
that are visible. The subject column and the message status column will always be visible
@property (copy) NSArray<NSAppleEventDescriptor *> *visibleColumns; // List of columns
viewer window is visible or not
@property BOOL previewPaneIsVisible; // Controls whether the preview pane of the message
or not
@property BOOL mailboxListVisible; // Controls whether the list of mailboxes is visible
@property BOOL sortedAscending; // Whether the viewer is sorted ascending or not
viewer
@property MailViewerColumns sortColumn; // The column that is currently sorted in the
@property (copy, readonly) MailMailbox *trashMailbox; // The top level Trash mailbox
@property (copy, readonly) MailMailbox *sentMailbox; // The top level Sent mailbox
@property (copy, readonly) MailMailbox *outbox; // The top level Out mailbox
@property (copy, readonly) MailMailbox *junkMailbox; // The top level Junk mailbox
@property (copy, readonly) MailMailbox *inbox; // The top level In mailbox
@property (copy, readonly) MailMailbox *draftsMailbox; // The top level Drafts mailbox
- (SBElementArray<MailMessage *> *) messages;
@interface MailMessageViewer : SBObject <MailGenericMethods>
// Represents the object responsible for managing a viewer window
@end

@property MailAuthentication authentication; // Preferred authentication scheme for
read via scripting
@property (copy) NSString *password; // Password for this account. Can be set, but not
- (NSString *) id; // The unique identifier of the account
@property (copy) NSString *name; // The name of an account
this account
@property (copy) id deliveryAccount; // The delivery account used when sending mail from
- (SBElementArray<MailMailbox *> *) mailboxes;
@interface MailAccount : SBObject <MailGenericMethods>
use the 'pop account', 'imap account', and 'iCloud account' objects
// A Mail account for receiving messages (POP/IMAP). To create a new receiving account,
@end
(BOOL)replyToAll; // Creates a reply message.
- (MailOutgoingMessage *) replyOpeningWindow:(BOOL)openingWindow replyToAll:
redirected message.
- (MailOutgoingMessage *) redirectOpeningWindow:(BOOL)openingWindow; // Creates a
forwarded message.
- (MailOutgoingMessage *) forwardOpeningWindow:(BOOL)openingWindow; // Creates a
or not
@property (readonly) BOOL wasRepliedTo; // Indicates whether the message was replied to
or not
@property (readonly) BOOL wasRedirected; // Indicates whether the message was redirected
or not
@property (readonly) BOOL wasForwarded; // Indicates whether the message was forwarded
@property (copy, readonly) NSString *subject; // The subject of the message
@property (copy, readonly) NSString *sender; // The sender of the message
@property (readonly) NSInteger messageSize; // The size (in bytes) of a message
to
@property (copy, readonly) NSString *replyTo; // The address that replies should be sent
@property (copy, readonly) NSString *source; // Raw source of the message
@property (copy, readonly) NSString *messageId; // The unique message ID string
@property BOOL readStatus; // Indicates whether the message is read or not
evaluated to be junk by the junk mail filter.
@property BOOL junkMailStatus; // Indicates whether the message has been marked junk or
flagged
@property NSInteger flagIndex; // The flag on the message, or -1 if the message is not
@property BOOL flaggedStatus; // Indicates whether the message is flagged or not
@property BOOL deletedStatus; // Indicates whether the message is deleted or not
@property (copy, readonly) NSDate *dateSent; // The date a message was sent
@property (copy, readonly) NSDate *dateReceived; // The date a message was received
@property (copy, readonly) MailRichText *content; // Contents of an email message
@property (copy) MailMailbox *mailbox; // The mailbox in which this message is filed
@property MailHighlightColors backgroundColor; // The background color of the message
@property (copy, readonly) NSString *allHeaders; // All the headers of the message
- (NSInteger) id; // The unique identifier of the message.
- (SBElementArray<MailMailAttachment *> *) mailAttachments;
- (SBElementArray<MailHeader *> *) headers;
- (SBElementArray<MailToRecipient *> *) toRecipients;
- (SBElementArray<MailRecipient *> *) recipients;

@property NSInteger bigMessageWarningSize; // If message size (in bytes) is over this
@interface MailPopAccount : MailAccount
// A POP email account
@end
@interface MailICloudAccount : MailImapAccount
// An iCloud or MobileMe email account
@end
be stored on the IMAP server
@property BOOL storeDeletedMessagesOnServer; // Indicates whether deleted messages will
stored on the IMAP server
@property BOOL storeSentMessagesOnServer; // Indicates whether sent messages will be
the IMAP server
@property BOOL storeJunkMailOnServer; // Indicates whether junk mail will be stored on
IMAP server
@property BOOL storeDraftsOnServer; // Indicates whether drafts will be stored on the
account
@property MailMessageCachingPolicy messageCaching; // Message caching setting for this
automatically compacted when you quit Mail or switch to another mailbox
@property BOOL compactMailboxesWhenClosing; // Indicates whether an IMAP mailbox is
@interface MailImapAccount : MailAccount
// An IMAP email account
@end
@property BOOL usesSsl; // Indicates whether SSL is enabled for this receiving account
deleted will be moved to the trash mailbox
@property BOOL moveDeletedMessagesToTrash; // Indicates whether messages that are
@property (copy) NSString *serverName; // The host name used to connect to an account
@property NSInteger port; // The port used to connect to an account
stores things on disk
@property (copy, readonly) NSURL *accountDirectory; // The directory where the account
@property (copy) NSString *userName; // The user name used to connect to an account
@property BOOL enabled; // Indicates whether the account is enabled or not
mailboxes will be permanently deleted on quit
@property BOOL emptyTrashOnQuit; // Indicates whether the messages in deleted messages
messages mailboxes will be deleted on quit
@property BOOL emptyJunkMessagesOnQuit; // Indicates whether the messages in the junk
are permanently deleted (0 = delete on quit, -1 = never delete)
@property NSInteger emptyTrashFrequency; // Number of days before messages in the trash
are deleted (0 = delete on quit, -1 = never delete)
@property NSInteger emptyJunkMessagesFrequency; // Number of days before junk messages
@property (copy) NSString *fullName; // The users full name configured for an account
configured for an account
@property (copy) NSArray<NSString *> *emailAddresses; // The list of email addresses
@property (readonly) MailTypeOfAccount accountType; // The type of an account
account

forwarded message. Set to empty string to include no prepended text
@property (copy) NSString *forwardText; // If rule matches, prepend this text to the
@property BOOL deleteMessage; // If rule matches, delete message
@property MailHighlightColors colorMessage; // If rule matches, apply this color
- (SBElementArray<MailRuleCondition *> *) ruleConditions;
@interface MailRule : SBObject <MailGenericMethods>
// Class for message rules
@end
@property (copy, readonly) MailMailbox *container;
@property (copy, readonly) MailAccount *account;
mailbox
@property (readonly) NSInteger unreadCount; // The number of unread messages in the
@property (copy) NSString *name; // The name of a mailbox
- (SBElementArray<MailMessage *> *) messages;
- (SBElementArray<MailMailbox *> *) mailboxes;
@interface MailMailbox : SBObject <MailGenericMethods>
// A mailbox that holds messages
@end
@property BOOL usesSsl; // Indicates whether SSL is enabled for this receiving account
@property (copy) NSString *serverName; // The host name used to connect to an account
@property NSInteger port; // The port used to connect to an account
@property (copy) NSString *userName; // The user name used to connect to an account
@property BOOL enabled; // Indicates whether the account is enabled or not
account
@property MailAuthentication authentication; // Preferred authentication scheme for
@property (readonly) MailTypeOfAccount accountType; // The type of an account
read via scripting
@property (copy) NSString *password; // Password for this account. Can be set, but not
@property (copy, readonly) NSString *name; // The name of an account
@interface MailSmtpServer : SBObject <MailGenericMethods>
// An SMTP account (for sending email)
@end
deleted from the server when moved from your POP inbox
@property BOOL deleteMessagesWhenMovedFromInbox; // Indicates whether messages will be
the server after downloading
@property BOOL deleteMailOnServer; // Indicates whether POP account deletes messages on
downloading)
that have been downloaded will be deleted from the server (0 = delete immediately after
@property NSInteger delayedMessageDeletionInterval; // Number of days before messages
prompt)
amount, Mail will prompt you asking whether you want to download the message (-1 = do not

@interface MailBccRecipient : MailRecipient
// An email recipient in the Bcc: field
@end
@property (copy) NSString *name; // The name used for display
@property (copy) NSString *address; // The recipients email address
@interface MailRecipient : SBObject <MailGenericMethods>
// An email recipient
@end
@property MailRuleType ruleType; // Rule type
@property MailRuleQualifier qualifier; // Rule qualifier
@property (copy) NSString *header; // Rule header key
@property (copy) NSString *expression; // Rule expression field
@interface MailRuleCondition : SBObject <MailGenericMethods>
// Class for conditions that can be attached to a single rule
@end
message
@property BOOL stopEvaluatingRules; // If rule matches, stop rule evaluation for this
@property BOOL shouldMoveMessage; // Indicates whether the rule has a move action
@property BOOL shouldCopyMessage; // Indicates whether the rule has a copy action
@property (copy) NSString *name; // Name of rule
@property BOOL enabled; // Indicates whether the rule is enabled
highlight the text or background of a message in the message list
@property BOOL highlightTextUsingColor; // Indicates whether the color will be used to
@property (copy) MailMailbox *moveMessage; // If rule matches, move to this mailbox
copy to this mailbox
@property (copy) MailMailbox *copyMessage NS_RETURNS_NOT_RETAINED; // If rule matches,
for rule to execute
@property BOOL allConditionsMustBeMet; // Indicates whether all conditions must be met
Set to empty string to disable this action
@property (copy) id runScript; // If rule matches, run this compiled AppleScript file.
with this text. Set to empty string to disable this action
@property (copy) NSString *replyText; // If rule matches, reply to message and prepend
action
address or multiple addresses, separate by commas. Set to empty string to disable this
@property (copy) NSString *redirectMessage; // If rule matches, redirect message to this
of sound or path to sound)
@property (copy) NSString *playSound; // If rule matches, play this sound (specify name
@property BOOL markRead; // If rule matches, mark message as read
flag. Set to -1 to disable this action
@property NSInteger markFlagIndex; // If rule matches, mark message with the specified
@property BOOL markFlagged; // If rule matches, mark message as flagged
action
address, or multiple addresses, separated by commas. Set to empty string to disable this
@property (copy) NSString *forwardMessage; // If rule matches, forward message to this

@end
- (NSString *) id; // The unique identifier of the attachment.
downloaded.
@property (readonly) BOOL downloaded; // Indicates whether the attachment has been
@property (readonly) NSInteger fileSize; // Approximate size in bytes.
plain.
@property (copy, readonly) NSString *MIMEType; // MIME type of the attachment E.g. text/
@property (copy, readonly) NSString *name; // Name of the attachment
@interface MailMailAttachment : SBObject <MailGenericMethods>
// A file attached to a received message.
@end
@property (copy) NSString *name; // Name of the header value
@property (copy) NSString *content; // Contents of the header
@interface MailHeader : SBObject <MailGenericMethods>
// A header value for a message. E.g. To, Subject, From.
@end
@interface MailContainer : MailMailbox
// A mailbox that contains other mailboxes.
@end
@interface MailToRecipient : MailRecipient
// An email recipient in the To: field
@end
@interface MailCcRecipient : MailRecipient
// An email recipient in the Cc: field
@end

